#!/usr/bin/env python3
"""
Module de fallback Yahoo Finance avec yahooquery
Utilis√© quand l'API directe Yahoo Finance √©choue
"""

import logging
from typing import Dict, List, Optional, Any
from datetime import datetime
import time

logger = logging.getLogger(__name__)

try:
    from yahooquery import Ticker
    YAHOOQUERY_AVAILABLE = True
except ImportError:
    YAHOOQUERY_AVAILABLE = False
    logger.warning("‚ö†Ô∏è yahooquery non disponible")

class YahooQueryFallback:
    """Fallback utilisant yahooquery pour les donn√©es Yahoo Finance"""
    
    def __init__(self):
        self.cache = {}
        self.last_request_time = None
        self.min_request_interval = 0.5  # D√©lai minimum entre les requ√™tes
        
        if not YAHOOQUERY_AVAILABLE:
            raise ImportError("yahooquery n'est pas install√©")
        
        logger.info("‚úÖ Module de fallback yahooquery initialis√©")
    
    def _wait_between_requests(self):
        """Attend entre les requ√™tes pour √©viter les rate limits"""
        if self.last_request_time:
            elapsed = time.time() - self.last_request_time
            if elapsed < self.min_request_interval:
                time.sleep(self.min_request_interval - elapsed)
        self.last_request_time = time.time()
    
    def get_stock_data(self, symbol: str) -> Optional[Dict[str, Any]]:
        """R√©cup√®re les donn√©es d'une action via yahooquery"""
        try:
            self._wait_between_requests()
            
            logger.info(f"üìä R√©cup√©ration donn√©es via yahooquery pour {symbol}")
            
            # Cr√©er un ticker yahooquery
            ticker = Ticker(symbol)
            
            # R√©cup√©rer les prix
            price_data = ticker.price
            
            # V√©rifier que price_data est un dictionnaire
            if not isinstance(price_data, dict):
                logger.error(f"‚ùå yahooquery retourne un type invalide pour {symbol}: {type(price_data)}")
                return None
            
            if symbol in price_data and price_data[symbol]:
                price_info = price_data[symbol]
                
                # Extraire les donn√©es essentielles
                current_price = price_info.get('regularMarketPrice')
                if current_price:
                    return {
                        'symbol': symbol,
                        'price': current_price,
                        'currency': price_info.get('currency', 'USD'),
                        'exchange': price_info.get('fullExchangeName', ''),
                        'timestamp': datetime.now().isoformat(),
                        'volume': price_info.get('regularMarketVolume'),
                        'high': price_info.get('regularMarketDayHigh'),
                        'low': price_info.get('regularMarketDayLow'),
                        'open': price_info.get('regularMarketOpen'),
                        'change': price_info.get('regularMarketChange'),
                        'change_percent': price_info.get('regularMarketChangePercent'),
                        'market_cap': price_info.get('marketCap'),
                        'pe_ratio': price_info.get('trailingPE'),
                        'dividend_yield': price_info.get('trailingAnnualDividendYield'),
                        'high_52_week': price_info.get('fiftyTwoWeekHigh'),
                        'low_52_week': price_info.get('fiftyTwoWeekLow'),
                        'previous_close': price_info.get('regularMarketPreviousClose')
                    }
            
            logger.warning(f"‚ö†Ô∏è Aucune donn√©e yahooquery pour {symbol}")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Erreur yahooquery pour {symbol}: {e}")
            return None
    
    def get_multiple_stocks(self, symbols: List[str]) -> Dict[str, Optional[Dict[str, Any]]]:
        """R√©cup√®re les donn√©es de plusieurs actions"""
        results = {}
        
        try:
            self._wait_between_requests()
            
            logger.info(f"üìä R√©cup√©ration donn√©es multiples via yahooquery pour {len(symbols)} symboles")
            
            # Cr√©er un ticker pour tous les symboles
            ticker = Ticker(symbols)
            
            # R√©cup√©rer les prix
            price_data = ticker.price
            
            # V√©rifier que price_data est un dictionnaire
            if not isinstance(price_data, dict):
                logger.error(f"‚ùå yahooquery retourne un type invalide pour les symboles multiples: {type(price_data)}")
                for symbol in symbols:
                    results[symbol] = None
                return results
            
            for symbol in symbols:
                if symbol in price_data and price_data[symbol]:
                    price_info = price_data[symbol]
                    
                    current_price = price_info.get('regularMarketPrice')
                    if current_price:
                        results[symbol] = {
                            'symbol': symbol,
                            'price': current_price,
                            'currency': price_info.get('currency', 'USD'),
                            'exchange': price_info.get('fullExchangeName', ''),
                            'timestamp': datetime.now().isoformat(),
                            'volume': price_info.get('regularMarketVolume'),
                            'high': price_info.get('regularMarketDayHigh'),
                            'low': price_info.get('regularMarketDayLow'),
                            'open': price_info.get('regularMarketOpen'),
                            'change': price_info.get('regularMarketChange'),
                            'change_percent': price_info.get('regularMarketChangePercent'),
                            'market_cap': price_info.get('marketCap'),
                            'pe_ratio': price_info.get('trailingPE'),
                            'dividend_yield': price_info.get('trailingAnnualDividendYield'),
                            'high_52_week': price_info.get('fiftyTwoWeekHigh'),
                            'low_52_week': price_info.get('fiftyTwoWeekLow'),
                            'previous_close': price_info.get('regularMarketPreviousClose')
                        }
                    else:
                        results[symbol] = None
                else:
                    results[symbol] = None
            
        except Exception as e:
            logger.error(f"‚ùå Erreur yahooquery multiple: {e}")
            for symbol in symbols:
                results[symbol] = None
        
        return results
    
    def get_stock_info(self, symbol: str) -> Optional[Dict[str, Any]]:
        """R√©cup√®re les informations d√©taill√©es d'une action"""
        try:
            self._wait_between_requests()
            
            ticker = Ticker(symbol)
            
            # R√©cup√©rer les informations d√©taill√©es
            info = ticker.asset_profile
            
            if symbol in info and info[symbol]:
                return info[symbol]
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Erreur yahooquery info pour {symbol}: {e}")
            return None
    
    def get_historical_data(self, symbol: str, period: str = "1mo") -> Optional[Dict[str, Any]]:
        """R√©cup√®re les donn√©es historiques d'une action"""
        try:
            self._wait_between_requests()
            
            ticker = Ticker(symbol)
            hist = ticker.history(period=period)
            
            if not hist.empty:
                return {
                    'data': hist.to_dict('records'),
                    'period': period,
                    'symbol': symbol
                }
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Erreur yahooquery historique pour {symbol}: {e}")
            return None
    
    def test_connection(self) -> bool:
        """Teste la connexion yahooquery"""
        try:
            logger.info("üß™ Test de connexion yahooquery...")
            
            test_data = self.get_stock_data("AAPL")
            if test_data:
                logger.info("‚úÖ Test de connexion yahooquery r√©ussi")
                return True
            else:
                logger.error("‚ùå Test de connexion yahooquery √©chou√©")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du test de connexion yahooquery: {e}")
            return False

# Fonction utilitaire pour obtenir une instance
def get_yahoo_fallback() -> YahooQueryFallback:
    """Retourne une instance de fallback yahooquery"""
    return YahooQueryFallback()

if __name__ == "__main__":
    # Test du module
    logging.basicConfig(level=logging.INFO)
    
    try:
        fallback = YahooQueryFallback()
        
        # Test de connexion
        if fallback.test_connection():
            print("‚úÖ Module de fallback yahooquery op√©rationnel")
            
            # Test avec quelques symboles
            symbols = ["AAPL", "MSFT", "GOOGL"]
            for symbol in symbols:
                data = fallback.get_stock_data(symbol)
                if data:
                    print(f"‚úÖ {symbol}: ${data['price']:.2f} {data['currency']} ({data['change_percent']:+.2f}%)")
                else:
                    print(f"‚ùå {symbol}: Erreur")
        else:
            print("‚ùå Module de fallback yahooquery non op√©rationnel")
            
    except ImportError as e:
        print(f"‚ùå yahooquery non disponible: {e}")
    except Exception as e:
        print(f"‚ùå Erreur: {e}") 