import os
import json
import logging
import re
import hashlib
import smtplib
import threading
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from enum import Enum
from functools import lru_cache, wraps
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from flask import Flask, jsonify, render_template, request
from flask_cors import CORS
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Import configuration seulement si les variables ne sont pas d√©j√† d√©finies
if not os.getenv("SUPABASE_URL") or not os.getenv("SUPABASE_KEY"):
    try:
        import config
        print("‚úÖ Configuration locale import√©e")
    except ImportError:
        print("‚ö†Ô∏è Fichier config.py non trouv√©")
else:
    print("‚úÖ Variables d'environnement d√©j√† d√©finies (d√©ploiement)")

# Configuration logging sophistiqu√©e
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Cache pour les prix des actions avec expiration
stock_price_cache = {}
STOCK_PRICE_CACHE_DURATION = 300  # 5 minutes (pour des mises √† jour plus fr√©quentes)



# Cache pour les taux de change avec expiration
forex_cache = {}
FOREX_CACHE_DURATION = 3600  # 1 heure

# Classes de donn√©es sophistiqu√©es
@dataclass
class CollectionItem:
    """Mod√®le de donn√©es enrichi pour un objet de collection"""
    name: str
    category: str
    status: str
    id: Optional[int] = None
    construction_year: Optional[int] = None
    condition: Optional[str] = None
    description: Optional[str] = None
    asking_price: Optional[float] = None
    sold_price: Optional[float] = None
    acquisition_price: Optional[float] = None
    for_sale: bool = False
    sale_status: Optional[str] = None
    sale_progress: Optional[str] = None
    buyer_contact: Optional[str] = None
    intermediary: Optional[str] = None
    current_offer: Optional[float] = None
    commission_rate: Optional[float] = None
    last_action_date: Optional[str] = None
    surface_m2: Optional[float] = None
    rental_income_chf: Optional[float] = None
    # Champs sp√©cifiques aux actions
    stock_symbol: Optional[str] = None
    stock_quantity: Optional[int] = None
    stock_purchase_price: Optional[float] = None
    stock_exchange: Optional[str] = None
    current_price: Optional[float] = None
    last_price_update: Optional[str] = None
    # M√©triques boursi√®res suppl√©mentaires
    stock_volume: Optional[int] = None
    stock_pe_ratio: Optional[float] = None
    stock_52_week_high: Optional[float] = None
    stock_52_week_low: Optional[float] = None
    stock_change: Optional[float] = None
    stock_change_percent: Optional[float] = None
    stock_average_volume: Optional[int] = None
    created_at: Optional[str] = None
    updated_at: Optional[str] = None
    embedding: Optional[List[float]] = None
    
    def to_dict(self) -> Dict[str, Any]:
        """Convertit en dictionnaire"""
        return {k: v for k, v in asdict(self).items() if v is not None}
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'CollectionItem':
        """Cr√©e une instance depuis un dictionnaire"""
        # Filtrer seulement les champs valides
        valid_fields = {k: v for k, v in data.items() if k in cls.__annotations__}
        return cls(**valid_fields)

class QueryIntent(Enum):
    """Types d'intentions sophistiqu√©es"""
    VEHICLE_ANALYSIS = "vehicle_analysis"
    FINANCIAL_ANALYSIS = "financial_analysis"
    SALE_PROGRESS_TRACKING = "sale_progress_tracking"
    MARKET_INTELLIGENCE = "market_intelligence"
    CATEGORY_ANALYTICS = "category_analytics"
    PERFORMANCE_METRICS = "performance_metrics"
    PORTFOLIO_OPTIMIZATION = "portfolio_optimization"
    TECHNICAL_SPECS = "technical_specs"
    SEMANTIC_SEARCH = "semantic_search"
    UNKNOWN = "unknown"

# Variables d'environnement avec validation
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY") 
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
APP_URL = os.getenv("APP_URL", "https://inventorysbo.onrender.com")

# Variables d'environnement pour Gmail
EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.gmail.com")
EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
EMAIL_USER = os.getenv("EMAIL_USER")
EMAIL_PASSWORD = os.getenv("EMAIL_PASSWORD")
EMAIL_RECIPIENTS = os.getenv("EMAIL_RECIPIENTS", "").split(",")

FINNHUB_API_KEY = os.getenv("FINNHUB_API_KEY")

# Configuration EODHD (excellente pour actions suisses)
EODHD_API_KEY = os.getenv("EODHD_API_KEY", "687ae6e8493e52.65071366")  # Cl√© par d√©faut pour test

# Configuration FreeCurrency (pour conversion USD/EUR vers CHF)
FREECURRENCY_API_KEY = os.getenv("FREECURRENCY_API_KEY", "fca_live_MhoTdTd6auvKD1Dr5kVQ7ua9SwgGPApjylr3CrRe")

if not all([SUPABASE_URL, SUPABASE_KEY]):
    logger.error("Variables d'environnement manquantes")
    raise EnvironmentError("SUPABASE_URL et SUPABASE_KEY sont requis")

logger.info("‚úÖ Variables d'environnement valid√©es")

# Connexions avec gestion d'erreurs
supabase = None
openai_client = None

try:
    from supabase import create_client
    supabase = create_client(SUPABASE_URL, SUPABASE_KEY)
    logger.info("‚úÖ Supabase connect√©")
except Exception as e:
    logger.error(f"‚ùå Erreur Supabase: {e}")
    raise

try:
    if OPENAI_API_KEY:
        from openai import OpenAI
        openai_client = OpenAI(api_key=OPENAI_API_KEY)
        logger.info("‚úÖ OpenAI connect√©")
    else:
        logger.warning("‚ö†Ô∏è OpenAI non configur√©")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è OpenAI non disponible: {e}")

# Gestionnaire de notifications Gmail avec style exact de la web app
class GmailNotificationManager:
    """Gestionnaire de notifications Gmail avec style identique √† la web app"""
    
    def __init__(self):
        self.email_host = EMAIL_HOST
        self.email_port = EMAIL_PORT
        self.email_user = EMAIL_USER
        self.email_password = EMAIL_PASSWORD
        self.recipients = [email.strip() for email in EMAIL_RECIPIENTS if email.strip()]
        self.enabled = bool(EMAIL_USER and EMAIL_PASSWORD and self.recipients)
        self.app_url = APP_URL
        
        if self.enabled:
            logger.info(f"‚úÖ Notifications Gmail activ√©es pour {len(self.recipients)} destinataires")
            logger.info(f"üîó URL de l'app: {self.app_url}")
        else:
            logger.warning("‚ö†Ô∏è Notifications Gmail d√©sactiv√©es - configuration manquante")
    
    def send_notification_async(self, subject: str, content: str, item_data: Optional[Dict] = None):
        """Envoie une notification de mani√®re asynchrone"""
        if not self.enabled:
            logger.warning("Notifications Gmail d√©sactiv√©es")
            return
        
        # Envoyer dans un thread s√©par√© pour ne pas bloquer l'API
        thread = threading.Thread(
            target=self._send_email,
            args=(subject, content, item_data),
            daemon=True
        )
        thread.start()
    
    def _send_email(self, subject: str, content: str, item_data: Optional[Dict] = None):
        """Envoie effectivement l'email via Gmail"""
        try:
            # Cr√©er le message
            msg = MIMEMultipart('alternative')
            msg['From'] = self.email_user
            msg['To'] = ", ".join(self.recipients)
            msg['Subject'] = f"[BONVIN Collection] {subject}"
            
            # Contenu HTML avec style exact de la web app
            html_content = self._create_webapp_style_html(subject, content, item_data)
            
            # Attacher le contenu HTML
            html_part = MIMEText(html_content, 'html', 'utf-8')
            msg.attach(html_part)
            
            # Contenu texte de secours
            text_content = self._create_text_content(subject, content, item_data)
            text_part = MIMEText(text_content, 'plain', 'utf-8')
            msg.attach(text_part)
            
            # Envoyer l'email via Gmail
            with smtplib.SMTP(self.email_host, self.email_port) as server:
                server.starttls()
                server.login(self.email_user, self.email_password)
                server.send_message(msg)
            
            logger.info(f"üìß Email Gmail envoy√©: {subject}")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur envoi Gmail: {e}")
    
    def _create_webapp_style_html(self, subject: str, content: str, item_data: Optional[Dict] = None) -> str:
        """Cr√©e un HTML avec le style EXACT de la web app"""
        timestamp = datetime.now().strftime("%d/%m/%Y √† %H:%M")
        
        # Donn√©es de l'objet si disponibles
        item_section = ""
        if item_data:
            item_section = self._create_item_details_section(item_data)
        
        return f"""
        <!DOCTYPE html>
        <html lang="fr">
        <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>{subject}</title>
            <link rel="preconnect" href="https://fonts.googleapis.com">
            <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
            <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
            <style>
                :root {{
                    --bg-color: #0A232A;
                    --glass-bg: rgba(10, 50, 60, 0.25);
                    --glass-border: rgba(0, 200, 220, 0.2);
                    --glass-glow: rgba(0, 220, 255, 0.15);
                    --text-primary: #e0e6e7;
                    --text-secondary: #88a0a8;
                }}
                
                body {{
                    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    line-height: 1.6;
                    color: var(--text-primary);
                    background-color: var(--bg-color);
                    margin: 0;
                    padding: 20px;
                    background-image: 
                        radial-gradient(circle at 15% 25%, rgba(0, 220, 255, 0.2), transparent 40%),
                        radial-gradient(circle at 85% 75%, rgba(10, 50, 60, 0.3), transparent 40%);
                }}
                
                .glass {{
                    background: var(--glass-bg);
                    backdrop-filter: blur(15px);
                    -webkit-backdrop-filter: blur(15px);
                    border: 1px solid var(--glass-border);
                    border-radius: 1.5rem;
                    box-shadow: 0 25px 50px -12px rgba(0,0,0,0.5);
                }}
                
                .glass-dark {{
                    background: rgba(10, 40, 50, 0.4);
                    backdrop-filter: blur(20px);
                    -webkit-backdrop-filter: blur(20px);
                    border: 1px solid var(--glass-border);
                    border-radius: 1.5rem;
                }}
                
                .glass-subtle {{
                    background: rgba(10, 35, 45, 0.3);
                    backdrop-filter: blur(12px);
                    -webkit-backdrop-filter: blur(12px);
                    border: 1px solid var(--glass-border);
                    border-radius: 1.5rem;
                }}
                
                .header-gradient {{
                    background: linear-gradient(135deg, #0ea5e9 0%, #0284c7 100%);
                    box-shadow: 0 10px 25px rgba(14, 165, 233, 0.3);
                }}
                
                .container {{
                    max-width: 600px;
                    margin: 0 auto;
                }}
                
                .main-card {{
                    margin-bottom: 30px;
                    padding: 30px;
                    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.6);
                }}
                
                .timestamp-badge {{
                    background: rgba(245, 158, 11, 0.15);
                    border: 1px solid rgba(245, 158, 11, 0.25);
                    color: #fbbf24;
                    padding: 15px;
                    border-radius: 12px;
                    margin: 20px 0;
                    border-left: 4px solid #f59e0b;
                }}
                
                .cta-button {{
                    background: linear-gradient(135deg, #0ea5e9, #0284c7);
                    color: white;
                    text-decoration: none;
                    padding: 12px 24px;
                    border-radius: 12px;
                    font-weight: 600;
                    display: inline-block;
                    box-shadow: 0 4px 15px rgba(14, 165, 233, 0.3);
                    transition: all 0.3s ease;
                }}
                
                .cta-button:hover {{
                    transform: translateY(-2px);
                    box-shadow: 0 8px 25px rgba(14, 165, 233, 0.4);
                }}
                
                /* Status badges - identiques √† la web app */
                .status-available {{
                    background: rgba(22, 163, 74, 0.2);
                    border: 1px solid rgba(22, 163, 74, 0.4);
                    color: #4ade80;
                    padding: 6px 12px;
                    border-radius: 12px;
                    font-size: 12px;
                    font-weight: 600;
                    display: inline-block;
                }}
                
                .status-sold {{
                    background: rgba(234, 88, 12, 0.2);
                    border: 1px solid rgba(234, 88, 12, 0.4);
                    color: #fb923c;
                    padding: 6px 12px;
                    border-radius: 12px;
                    font-size: 12px;
                    font-weight: 600;
                    display: inline-block;
                }}
                
                .status-for-sale {{
                    background: rgba(220, 38, 38, 0.15);
                    border: 1px solid rgba(220, 38, 38, 0.3);
                    color: #f87171;
                    padding: 6px 12px;
                    border-radius: 12px;
                    font-size: 12px;
                    font-weight: 600;
                    display: inline-block;
                    animation: pulse-sale 2s infinite;
                }}
                
                .status-sale-progress {{
                    background: rgba(59, 130, 246, 0.2);
                    border: 1px solid rgba(59, 130, 246, 0.4);
                    color: #60a5fa;
                    padding: 6px 12px;
                    border-radius: 12px;
                    font-size: 12px;
                    font-weight: 600;
                    display: inline-block;
                }}
                
                @keyframes pulse-sale {{
                    0%, 100% {{ opacity: 1; }}
                    50% {{ opacity: 0.7; }}
                }}
                
                .item-table {{
                    width: 100%;
                    border-collapse: separate;
                    border-spacing: 0;
                    background: rgba(15, 23, 42, 0.6);
                    border-radius: 12px;
                    overflow: hidden;
                }}
                
                .item-table td {{
                    padding: 12px 16px;
                    border-bottom: 1px solid rgba(0, 200, 220, 0.1);
                }}
                
                .item-table td:first-child {{
                    font-weight: 600;
                    color: var(--text-secondary);
                    width: 40%;
                }}
                
                .item-table tr:last-child td {{
                    border-bottom: none;
                }}
                
                .content-text {{
                    font-size: 16px;
                    line-height: 1.7;
                    margin: 20px 0;
                }}
                
                .footer-card {{
                    text-align: center;
                    padding: 20px;
                    color: var(--text-secondary);
                    font-size: 14px;
                    margin-top: 20px;
                }}
                
                .price-highlight {{
                    font-weight: 700;
                    color: #10b981;
                }}
                
                .offer-highlight {{
                    font-weight: 700;
                    color: #ef4444;
                }}
                
                h1, h2, h3 {{
                    font-weight: 700;
                    color: var(--text-primary);
                }}
                
                .logo-text {{
                    font-size: 28px;
                    font-weight: 800;
                    letter-spacing: 2px;
                    color: white;
                    margin: 0;
                }}
                
                .subtitle {{
                    color: #e0f2fe;
                    margin: 10px 0 0 0;
                    font-size: 16px;
                    font-weight: 500;
                }}
                
                @media (max-width: 600px) {{
                    body {{ padding: 10px; }}
                    .main-card {{ padding: 20px; }}
                    .item-table td {{ padding: 10px 12px; }}
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <!-- Header avec style exact de la web app -->
                <div class="header-gradient glass" style="padding: 30px; text-align: center; margin-bottom: 30px;">
                    <h1 class="logo-text">BONVIN COLLECTION</h1>
                    <p class="subtitle">Notification de changement</p>
                </div>
                
                <!-- Contenu principal -->
                <div class="glass main-card">
                    <h2 style="margin: 0 0 20px 0; font-size: 22px;">{subject}</h2>
                    
                    <!-- Timestamp -->
                    <div class="timestamp-badge">
                        <strong>üìÖ {timestamp}</strong>
                    </div>
                    
                    <!-- Contenu -->
                    <div class="content-text">
                        {content.replace(chr(10), '<br>')}
                    </div>
                    
                    <!-- D√©tails de l'objet -->
                    {item_section}
                    
                    <!-- Call to Action -->
                    <div style="text-align: center; margin: 30px 0;">
                        <a href="{self.app_url}" class="cta-button">
                            üéØ Acc√©der au tableau de bord
                        </a>
                    </div>
                </div>
                
                <!-- Footer -->
                <div class="glass footer-card">
                    <p style="margin: 0 0 10px 0;">
                        <strong>Notification automatique BONVIN Collection</strong>
                    </p>
                    <p style="margin: 0; opacity: 0.8;">
                        Email g√©n√©r√© automatiquement ‚Ä¢ <a href="{self.app_url}" style="color: #22d3ee;">Acc√©der √† l'interface</a>
                    </p>
                </div>
            </div>
        </body>
        </html>
        """
    
    def _create_item_details_section(self, item_data: Dict) -> str:
        """Cr√©e la section d√©tails avec le style de la web app"""
        details_rows = []
        
        # Nom
        if item_data.get('name'):
            details_rows.append(f'<tr><td>Nom:</td><td><strong>{item_data["name"]}</strong></td></tr>')
        
        # Cat√©gorie
        if item_data.get('category'):
            details_rows.append(f'<tr><td>Cat√©gorie:</td><td>{item_data["category"]}</td></tr>')
        
        # Statut avec badge
        if item_data.get('status'):
            status_class = 'status-available' if item_data['status'] == 'Available' else 'status-sold'
            status_text = 'Disponible' if item_data['status'] == 'Available' else 'Vendu'
            details_rows.append(f'<tr><td>Statut:</td><td><span class="{status_class}">{status_text}</span></td></tr>')
        
        # En vente
        if item_data.get('for_sale'):
            details_rows.append(f'<tr><td>En vente:</td><td><span class="status-for-sale">üî• EN VENTE</span></td></tr>')
        
        # Statut de vente
        if item_data.get('sale_status'):
            status_label = self._get_sale_status_label_text(item_data['sale_status'])
            details_rows.append(f'<tr><td>Statut vente:</td><td><span class="status-sale-progress">{status_label}</span></td></tr>')
        
        # Prix demand√©
        if item_data.get('asking_price'):
            price_formatted = f"{item_data['asking_price']:,.0f} CHF"
            details_rows.append(f'<tr><td>Prix demand√©:</td><td><span class="price-highlight">{price_formatted}</span></td></tr>')
        
        # Offre actuelle
        if item_data.get('current_offer'):
            offer_formatted = f"{item_data['current_offer']:,.0f} CHF"
            details_rows.append(f'<tr><td>Offre actuelle:</td><td><span class="offer-highlight">{offer_formatted}</span></td></tr>')
        
        # Prix de vente
        if item_data.get('sold_price'):
            sold_formatted = f"{item_data['sold_price']:,.0f} CHF"
            details_rows.append(f'<tr><td>Vendu pour:</td><td><span class="price-highlight">{sold_formatted}</span></td></tr>')
        
        # Ann√©e
        if item_data.get('construction_year'):
            details_rows.append(f'<tr><td>Ann√©e:</td><td>{item_data["construction_year"]}</td></tr>')
        
        # Informations sp√©cifiques aux actions
        if item_data.get('category') == 'Actions':
            if item_data.get('stock_symbol'):
                details_rows.append(f'<tr><td>Symbole:</td><td>{item_data["stock_symbol"]}</td></tr>')
            if item_data.get('stock_quantity'):
                details_rows.append(f'<tr><td>Quantit√©:</td><td>{item_data["stock_quantity"]} actions</td></tr>')
            if item_data.get('stock_exchange'):
                details_rows.append(f'<tr><td>Bourse:</td><td>{item_data["stock_exchange"]}</td></tr>')
        
        # Interm√©diaire
        if item_data.get('intermediary'):
            details_rows.append(f'<tr><td>Interm√©diaire:</td><td>{item_data["intermediary"]}</td></tr>')
        
        # D√©tails du progr√®s
        if item_data.get('sale_progress'):
            progress_text = item_data['sale_progress'][:150] + ('...' if len(item_data['sale_progress']) > 150 else '')
            details_rows.append(f'<tr><td>D√©tails du progr√®s:</td><td style="font-style: italic; color: #60a5fa;">{progress_text}</td></tr>')
        
        # Description
        if item_data.get('description'):
            desc_text = item_data['description'][:200] + ('...' if len(item_data['description']) > 200 else '')
            details_rows.append(f'<tr><td>Description:</td><td style="max-width: 300px; word-wrap: break-word;">{desc_text}</td></tr>')
        
        if details_rows:
            return f'''
            <div class="glass-subtle" style="padding: 20px; margin: 20px 0;">
                <h3 style="color: #22d3ee; margin: 0 0 15px 0; font-size: 18px;">üìã D√©tails de l'objet</h3>
                <table class="item-table">
                    {''.join(details_rows)}
                </table>
            </div>
            '''
        
        return ""
    
    def _get_sale_status_label_text(self, status: str) -> str:
        """Libell√©s de statut de vente"""
        status_labels = {
            'initial': 'Mise en vente initiale',
            'presentation': 'Pr√©paration pr√©sentation',
            'intermediary': 'Choix interm√©diaires',
            'inquiries': 'Premi√®res demandes',
            'viewing': 'Visites programm√©es',
            'negotiation': 'En n√©gociation',
            'offer_received': 'Offre re√ßue',
            'offer_accepted': 'Offre accept√©e',
            'paperwork': 'Formalit√©s en cours',
            'completed': 'Vente finalis√©e'
        }
        return status_labels.get(status, status)
    
    def _create_text_content(self, subject: str, content: str, item_data: Optional[Dict] = None) -> str:
        """Cr√©e un contenu texte de secours"""
        timestamp = datetime.now().strftime("%d/%m/%Y √† %H:%M")
        
        text_content = f"""
BONVIN Collection - Notification
================================

{subject}

Date: {timestamp}

{content}
"""
        
        if item_data:
            text_content += f"""

D√©tails de l'objet:
------------------
Nom: {item_data.get('name', 'N/A')}
Cat√©gorie: {item_data.get('category', 'N/A')}
Statut: {item_data.get('status', 'N/A')}
"""
            if item_data.get('for_sale'):
                text_content += f"En vente: Oui\n"
            if item_data.get('sale_status'):
                text_content += f"Statut vente: {self._get_sale_status_label_text(item_data.get('sale_status', ''))}\n"
            if item_data.get('asking_price'):
                text_content += f"Prix demand√©: {item_data.get('asking_price', 0):,.0f} CHF\n"
            if item_data.get('current_offer'):
                text_content += f"Offre actuelle: {item_data.get('current_offer', 0):,.0f} CHF\n"
            if item_data.get('sold_price'):
                text_content += f"Vendu: {item_data.get('sold_price', 0):,.0f} CHF\n"
            if item_data.get('construction_year'):
                text_content += f"Ann√©e: {item_data.get('construction_year')}\n"
            if item_data.get('category') == 'Actions':
                if item_data.get('stock_symbol'):
                    text_content += f"Symbole boursier: {item_data.get('stock_symbol')}\n"
                if item_data.get('stock_quantity'):
                    text_content += f"Quantit√©: {item_data.get('stock_quantity')} actions\n"
            if item_data.get('sale_progress'):
                text_content += f"D√©tails du progr√®s: {item_data.get('sale_progress')[:100]}{'...' if len(item_data.get('sale_progress', '')) > 100 else ''}\n"
            if item_data.get('description'):
                text_content += f"Description: {item_data.get('description')[:100]}{'...' if len(item_data.get('description', '')) > 100 else ''}\n"
        
        text_content += f"\n---\nAcc√©der au tableau de bord: {self.app_url}\nNotification automatique BONVIN Collection"
        
        return text_content
    
    def notify_item_created(self, item_data: Dict):
        """Notification pour un nouvel objet"""
        subject = f"Nouvel objet ajout√©: {item_data.get('name', 'Objet sans nom')}"
        content = f"""
üÜï Un nouvel objet vient d'√™tre ajout√© √† votre collection !

L'objet "<strong>{item_data.get('name', 'N/A')}</strong>" de la cat√©gorie "<strong>{item_data.get('category', 'N/A')}</strong>" a √©t√© cr√©√© avec succ√®s.

{"üî• <strong>Cet objet est imm√©diatement mis en vente !</strong>" if item_data.get('for_sale') else "üì¶ Cet objet est ajout√© √† votre inventaire."}

‚ú® Votre collection compte maintenant un objet de plus !
        """
        self.send_notification_async(subject, content, item_data)
    
    def notify_item_updated(self, old_data: Dict, new_data: Dict):
        """Notification pour une modification d'objet"""
        changes = self._detect_important_changes(old_data, new_data)
        
        if not changes:
            return  # Pas de changements importants
        
        subject = f"Modification: {new_data.get('name', 'Objet')}"
        
        content = f"üìù Des informations importantes ont √©t√© mises √† jour pour cet objet:\n\n"
        
        for change in changes:
            content += f"‚Ä¢ {change}\n"
        
        content += f"\nüí° Consultez le tableau de bord pour voir tous les d√©tails."
        
        self.send_notification_async(subject, content, new_data)
    
    def notify_sale_status_change(self, item_data: Dict, old_status: str, new_status: str):
        """Notification sp√©ciale pour changement de statut de vente"""
        old_label = self._get_sale_status_label_text(old_status)
        new_label = self._get_sale_status_label_text(new_status)
        
        # √âmojis selon la progression
        emoji = "üìà"
        if new_status in ['offer_received', 'offer_accepted']:
            emoji = "üéØ"
        elif new_status == 'negotiation':
            emoji = "üî•"
        elif new_status == 'completed':
            emoji = "üéâ"
        
        subject = f"{emoji} √âvolution de vente: {item_data.get('name', 'Objet')}"
        
        content = f"""
üöÄ Le statut de vente de cet objet vient de progresser !

üìä <strong>√âvolution:</strong> "{old_label}" ‚Üí "<strong>{new_label}</strong>"

{self._get_status_advice(new_status)}

üí° {self._get_next_step_advice(new_status)}
        """
        
        self.send_notification_async(subject, content, item_data)
    
    def notify_new_offer(self, item_data: Dict, offer_amount: float):
        """Notification pour une nouvelle offre"""
        subject = f"üí∞ Nouvelle offre: {item_data.get('name', 'Objet')}"
        
        asking_price = item_data.get('asking_price', 0)
        percentage = (offer_amount / asking_price * 100) if asking_price > 0 else 0
        
        if percentage >= 90:
            quality = "üî• <strong>Excellente offre !</strong>"
            advice = "Cette offre est tr√®s proche de votre prix demand√©. Consid√©rez s√©rieusement cette proposition."
        elif percentage >= 75:
            quality = "‚úÖ <strong>Offre int√©ressante</strong>"
            advice = "Cette offre m√©rite une analyse approfondie. Vous pouvez n√©gocier ou accepter."
        elif percentage >= 50:
            quality = "‚ö†Ô∏è <strong>Offre √† n√©gocier</strong>"
            advice = "Cette offre est en dessous de vos attentes. Contre-proposez ou n√©gociez."
        else:
            quality = "‚ùå <strong>Offre faible</strong>"
            advice = "Cette offre est significativement en dessous du prix demand√©. √âvaluez si une n√©gociation est pertinente."
        
        content = f"""
üí∞ Une nouvelle offre vient d'√™tre re√ßue pour cet objet !

<strong>Montant de l'offre:</strong> {offer_amount:,.0f} CHF
<strong>Prix demand√©:</strong> {asking_price:,.0f} CHF  
<strong>Pourcentage:</strong> {percentage:.1f}% du prix demand√©

{quality}

üí° <strong>Conseil:</strong> {advice}

‚è∞ <strong>Prochaine √©tape:</strong> Analysez cette offre et pr√©parez votre r√©ponse rapidement pour maintenir l'int√©r√™t de l'acheteur.
        """
        
        self.send_notification_async(subject, content, item_data)
    
    def _detect_important_changes(self, old_data: Dict, new_data: Dict) -> List[str]:
        """D√©tecte les changements importants"""
        changes = []
        
        # Changements de statut
        if old_data.get('status') != new_data.get('status'):
            changes.append(f"<strong>Statut:</strong> {old_data.get('status', 'N/A')} ‚Üí {new_data.get('status', 'N/A')}")
        
        # Mise en vente
        if old_data.get('for_sale') != new_data.get('for_sale'):
            if new_data.get('for_sale'):
                changes.append("üî• <strong>Objet mis en vente</strong>")
            else:
                changes.append("üì¶ <strong>Objet retir√© de la vente</strong>")
        
        # Changement de statut de vente
        if old_data.get('sale_status') != new_data.get('sale_status'):
            old_status = self._get_sale_status_label_text(old_data.get('sale_status', ''))
            new_status = self._get_sale_status_label_text(new_data.get('sale_status', ''))
            changes.append(f"<strong>Statut de vente:</strong> {old_status} ‚Üí {new_status}")
        
        # Changement de d√©tails du progr√®s
        old_progress = (old_data.get('sale_progress') or '').strip()
        new_progress = (new_data.get('sale_progress') or '').strip()
        
        if old_progress != new_progress:
            if not old_progress and new_progress:
                changes.append(f"üìã <strong>D√©tails du progr√®s ajout√©s:</strong> {new_progress[:100]}{'...' if len(new_progress) > 100 else ''}")
            elif old_progress and not new_progress:
                changes.append(f"üóëÔ∏è <strong>D√©tails du progr√®s supprim√©s</strong>")
            elif old_progress and new_progress:
                changes.append(f"üìã <strong>D√©tails du progr√®s modifi√©s:</strong> {new_progress[:100]}{'...' if len(new_progress) > 100 else ''}")
        
        # Nouvelle offre
        if old_data.get('current_offer') != new_data.get('current_offer'):
            if new_data.get('current_offer'):
                changes.append(f"üí∞ <strong>Nouvelle offre:</strong> {new_data.get('current_offer', 0):,.0f} CHF")
        
        # Changement de prix
        if old_data.get('asking_price') != new_data.get('asking_price'):
            changes.append(f"<strong>Prix demand√©:</strong> {old_data.get('asking_price', 0):,.0f} CHF ‚Üí {new_data.get('asking_price', 0):,.0f} CHF")
        
        # Prix de vente final
        if old_data.get('sold_price') != new_data.get('sold_price'):
            if new_data.get('sold_price'):
                changes.append(f"üéâ <strong>Vendu pour:</strong> {new_data.get('sold_price', 0):,.0f} CHF")
        
        # Changements sp√©cifiques aux actions
        if new_data.get('category') == 'Actions':
            if old_data.get('stock_quantity') != new_data.get('stock_quantity'):
                changes.append(f"<strong>Quantit√© d'actions:</strong> {old_data.get('stock_quantity', 0)} ‚Üí {new_data.get('stock_quantity', 0)}")
            if old_data.get('stock_symbol') != new_data.get('stock_symbol'):
                changes.append(f"<strong>Symbole boursier:</strong> {old_data.get('stock_symbol', 'N/A')} ‚Üí {new_data.get('stock_symbol', 'N/A')}")
            if old_data.get('current_price') != new_data.get('current_price'):
                changes.append(f"<strong>Prix actuel:</strong> {old_data.get('current_price', 0):,.0f} CHF ‚Üí {new_data.get('current_price', 0):,.0f} CHF/action")
        
        return changes
    
    def _get_status_advice(self, status: str) -> str:
        """Retourne un conseil selon le statut"""
        advice = {
            'negotiation': "üî• <strong>Phase critique !</strong> Surveillez les n√©gociations de pr√®s et r√©pondez rapidement aux demandes.",
            'offer_received': "üí∞ <strong>Offre en attente !</strong> Analysez l'offre et pr√©parez votre r√©ponse dans les plus brefs d√©lais.",
            'offer_accepted': "‚úÖ <strong>F√©licitations !</strong> L'offre a √©t√© accept√©e. Pr√©parez les documents pour finaliser la vente.",
            'paperwork': "üìã <strong>Finalisation en cours</strong> Veillez √† ce que toutes les formalit√©s soient compl√©t√©es rapidement.",
            'completed': "üéâ <strong>Vente finalis√©e avec succ√®s !</strong> Bravo pour cette transaction r√©ussie !"
        }
        return advice.get(status, "üìä Continuez le suivi attentif de cette vente.")
    
    def _get_next_step_advice(self, status: str) -> str:
        """Conseils pour les prochaines √©tapes"""
        next_steps = {
            'negotiation': "Pr√©parez vos arguments de n√©gociation et d√©finissez votre prix minimum acceptable.",
            'offer_received': "√âvaluez l'offre, consultez un expert si n√©cessaire, et r√©pondez dans les 24-48h.",
            'offer_accepted': "Contactez votre notaire/avocat et pr√©parez tous les documents n√©cessaires.",
            'paperwork': "Suivez l'avancement des formalit√©s et relancez si n√©cessaire.",
            'completed': "Archivez les documents et mettez √† jour votre comptabilit√©."
        }
        return f"<strong>Prochaine √©tape:</strong> {next_steps.get(status, 'Continuez le suivi de cette vente.')}"

# Cache sophistiqu√©
class SmartCache:
    """Cache intelligent multi-niveaux"""
    
    def __init__(self):
        self._caches = {
            'items': {'data': None, 'timestamp': None, 'ttl': 60},
            'analytics': {'data': None, 'timestamp': None, 'ttl': 300},
            'ai_responses': {'data': {}, 'timestamp': None, 'ttl': 900},
            'embeddings': {'data': {}, 'timestamp': None, 'ttl': 3600}
        }
    
    def get(self, cache_name: str, key: str = 'default'):
        """R√©cup√®re du cache"""
        if cache_name not in self._caches:
            return None
        
        cache_info = self._caches[cache_name]
        now = datetime.now()
        
        if cache_info['timestamp'] and (now - cache_info['timestamp']).seconds < cache_info['ttl']:
            if cache_name in ['ai_responses', 'embeddings']:
                return cache_info['data'].get(key)
            return cache_info['data']
        
        return None
    
    def set(self, cache_name: str, data: Any, key: str = 'default'):
        """Stocke dans le cache"""
        if cache_name not in self._caches:
            return
        
        if cache_name in ['ai_responses', 'embeddings']:
            if not isinstance(self._caches[cache_name]['data'], dict):
                self._caches[cache_name]['data'] = {}
            self._caches[cache_name]['data'][key] = data
        else:
            self._caches[cache_name]['data'] = data
        
        self._caches[cache_name]['timestamp'] = datetime.now()
    
    def invalidate(self, cache_name: str = None):
        """Invalide le cache"""
        if cache_name:
            if cache_name in self._caches:
                self._caches[cache_name]['data'] = None if cache_name not in ['ai_responses', 'embeddings'] else {}
                self._caches[cache_name]['timestamp'] = None
        else:
            for cache_info in self._caches.values():
                cache_info['data'] = None
                cache_info['timestamp'] = None

# Instance globale du cache
smart_cache = SmartCache()

# Instance globale du gestionnaire Gmail
gmail_manager = GmailNotificationManager()

# Application Flask
app = Flask(__name__)
app.config.update(
    SECRET_KEY=os.environ.get('SECRET_KEY', 'bonvin-collection-secret'),
    JSON_SORT_KEYS=False
)
CORS(app)

# Gestionnaire de donn√©es sophistiqu√©
class AdvancedDataManager:
    """Gestionnaire de donn√©es avec logique m√©tier avanc√©e"""
    
    @staticmethod
    def fetch_all_items() -> List[CollectionItem]:
        """R√©cup√®re tous les objets avec cache"""
        cached_items = smart_cache.get('items')
        if cached_items:
            logger.info(f"üì¶ Cache: {len(cached_items)} objets")
            return cached_items
        
        try:
            if not supabase:
                return []
            
            response = supabase.table("items").select("*").order("updated_at", desc=True).execute()
            raw_items = response.data or []
            
            items = []
            for raw_item in raw_items:
                try:
                    # Convertir l'embedding du format pgvector
                    if 'embedding' in raw_item and raw_item['embedding']:
                        embedding = raw_item['embedding']
                        
                        # Si c'est une string qui ressemble √† un array pgvector
                        if isinstance(embedding, str):
                            # Format pgvector: "[0.1,0.2,0.3]" ou "(0.1,0.2,0.3)"
                            embedding = embedding.strip()
                            if embedding.startswith('[') and embedding.endswith(']'):
                                # Format JSON array
                                try:
                                    raw_item['embedding'] = json.loads(embedding)
                                except:
                                    # Fallback: parser manuellement
                                    raw_item['embedding'] = [float(x) for x in embedding[1:-1].split(',')]
                            elif embedding.startswith('(') and embedding.endswith(')'):
                                # Format pgvector tuple
                                raw_item['embedding'] = [float(x) for x in embedding[1:-1].split(',')]
                            else:
                                logger.warning(f"Format d'embedding inconnu pour {raw_item.get('name', 'item')}: {embedding[:50]}")
                                raw_item['embedding'] = None
                        elif isinstance(embedding, list):
                            # D√©j√† une liste, parfait
                            pass
                        else:
                            logger.warning(f"Type d'embedding invalide pour {raw_item.get('name', 'item')}: {type(embedding)}")
                            raw_item['embedding'] = None
                    
                    item = CollectionItem.from_dict(raw_item)
                    items.append(item)
                except Exception as e:
                    logger.warning(f"Erreur item {raw_item.get('id', '?')}: {e}")
                    continue
            
            smart_cache.set('items', items)
            logger.info(f"üîÑ {len(items)} objets charg√©s")
            return items
            
        except Exception as e:
            logger.error(f"Erreur fetch: {e}")
            return []
    
    @staticmethod
    def calculate_advanced_analytics(items: List[CollectionItem]) -> Dict[str, Any]:
        """Calcule des analytics sophistiqu√©es"""
        cached_analytics = smart_cache.get('analytics')
        if cached_analytics:
            return cached_analytics
        
        analytics = {
            'basic_metrics': AdvancedDataManager._basic_metrics(items),
            'financial_metrics': AdvancedDataManager._financial_metrics(items),
            'category_analytics': AdvancedDataManager._category_analytics(items),
            'sales_pipeline': AdvancedDataManager._sales_pipeline(items),
            'performance_kpis': AdvancedDataManager._performance_kpis(items),
            'market_insights': AdvancedDataManager._market_insights(items),
            'stock_analytics': AdvancedDataManager._stock_analytics(items)
        }
        
        smart_cache.set('analytics', analytics)
        return analytics
    
    @staticmethod
    def _basic_metrics(items: List[CollectionItem]) -> Dict[str, Any]:
        """M√©triques de base enrichies"""
        total = len(items)
        available = len([i for i in items if i.status == 'Available'])
        sold = len([i for i in items if i.status == 'Sold'])
        for_sale = len([i for i in items if i.for_sale])
        
        return {
            'total_items': total,
            'available_items': available,
            'sold_items': sold,
            'items_for_sale': for_sale,
            'availability_rate': (available / total * 100) if total > 0 else 0,
            'conversion_rate': (sold / total * 100) if total > 0 else 0,
            'active_sale_rate': (for_sale / available * 100) if available > 0 else 0
        }
    
    @staticmethod
    def _financial_metrics(items: List[CollectionItem]) -> Dict[str, Any]:
        """M√©triques financi√®res avanc√©es"""
        total_asking = sum(i.asking_price or 0 for i in items if i.status == 'Available' and i.asking_price)
        total_sold = sum(i.sold_price or 0 for i in items if i.status == 'Sold' and i.sold_price)
        total_acquisition = sum(i.acquisition_price or 0 for i in items if i.acquisition_price)
        
        # ROI calculation
        profit_items = [
            (i.sold_price or 0) - (i.acquisition_price or 0)
            for i in items 
            if i.status == 'Sold' and i.sold_price and i.acquisition_price
        ]
        
        total_profit = sum(profit_items)
        roi_percentage = (total_profit / total_acquisition * 100) if total_acquisition > 0 else 0
        
        return {
            'portfolio_value': total_asking,
            'realized_sales': total_sold,
            'total_acquisition_cost': total_acquisition,
            'total_profit': total_profit,
            'roi_percentage': roi_percentage,
            'average_item_value': total_asking / len([i for i in items if i.asking_price]) if any(i.asking_price for i in items) else 0,
            'profit_margin': (total_profit / total_sold * 100) if total_sold > 0 else 0
        }
    
    @staticmethod
    def _category_analytics(items: List[CollectionItem]) -> Dict[str, Any]:
        """Analytics par cat√©gorie"""
        categories = {}
        
        for item in items:
            cat = item.category or 'Uncategorized'
            if cat not in categories:
                categories[cat] = {
                    'total': 0, 'available': 0, 'sold': 0, 'for_sale': 0,
                    'total_value': 0, 'avg_value': 0
                }
            
            stats = categories[cat]
            stats['total'] += 1
            
            if item.status == 'Available':
                stats['available'] += 1
            elif item.status == 'Sold':
                stats['sold'] += 1
            
            if item.for_sale:
                stats['for_sale'] += 1
            
            value = item.asking_price or item.sold_price or 0
            stats['total_value'] += value
        
        # Calculer les moyennes
        for stats in categories.values():
            if stats['total'] > 0:
                stats['avg_value'] = stats['total_value'] / stats['total']
        
        return categories
    
    @staticmethod
    def _sales_pipeline(items: List[CollectionItem]) -> Dict[str, Any]:
        """Pipeline de vente sophistiqu√©"""
        pipeline_stages = {
            'initial': 'Mise en vente initiale',
            'presentation': 'Pr√©paration pr√©sentation',
            'intermediary': 'Choix interm√©diaires',
            'inquiries': 'Premi√®res demandes',
            'viewing': 'Visites programm√©es',
            'negotiation': 'En n√©gociation',
            'offer_received': 'Offres re√ßues',
            'offer_accepted': 'Offres accept√©es',
            'paperwork': 'Formalit√©s en cours',
            'completed': 'Ventes finalis√©es'
        }
        
        pipeline_data = {}
        total_value = 0
        
        for stage_key, stage_name in pipeline_stages.items():
            stage_items = [i for i in items if i.for_sale and i.sale_status == stage_key]
            stage_value = sum(i.asking_price or 0 for i in stage_items)
            
            pipeline_data[stage_key] = {
                'name': stage_name,
                'count': len(stage_items),
                'total_value': stage_value,
                'items': [{'name': i.name, 'value': i.asking_price} for i in stage_items]
            }
            total_value += stage_value
        
        return {
            'stages': pipeline_data,
            'total_pipeline_value': total_value,
            'active_negotiations': len([i for i in items if i.for_sale and i.sale_status in ['negotiation', 'offer_received']])
        }
    
    @staticmethod
    def _performance_kpis(items: List[CollectionItem]) -> Dict[str, Any]:
        """KPIs de performance"""
        # Top performers par valeur
        top_sales = sorted(
            [i for i in items if i.sold_price], 
            key=lambda x: x.sold_price, 
            reverse=True
        )[:5]
        
        # Distribution des prix
        prices = [i.sold_price or i.asking_price for i in items if i.sold_price or i.asking_price]
        price_ranges = {
            'under_100k': len([p for p in prices if p < 100000]),
            '100k_500k': len([p for p in prices if 100000 <= p < 500000]),
            '500k_1m': len([p for p in prices if 500000 <= p < 1000000]),
            'over_1m': len([p for p in prices if p >= 1000000])
        }
        
        return {
            'top_value_sales': [{'name': i.name, 'value': i.sold_price} for i in top_sales],
            'price_distribution': price_ranges,
            'inventory_turnover': len([i for i in items if i.status == 'Sold']) / len(items) if items else 0
        }
    
    @staticmethod
    def _market_insights(items: List[CollectionItem]) -> Dict[str, Any]:
        """Insights de march√©"""
        # Hotness par cat√©gorie (bas√© sur l'activit√©)
        category_activity = {}
        
        for item in items:
            cat = item.category or 'Other'
            if cat not in category_activity:
                category_activity[cat] = 0
            
            # Score d'activit√©
            if item.for_sale:
                category_activity[cat] += 2
            if item.sale_status in ['negotiation', 'offer_received']:
                category_activity[cat] += 5
            if item.status == 'Sold':
                category_activity[cat] += 3
        
        return {
            'category_activity_scores': category_activity,
            'most_active_category': max(category_activity.items(), key=lambda x: x[1])[0] if category_activity else None,
            'market_temperature': 'hot' if max(category_activity.values(), default=0) > 10 else 'warm' if max(category_activity.values(), default=0) > 5 else 'cool'
        }
    
    @staticmethod
    def _stock_analytics(items: List[CollectionItem]) -> Dict[str, Any]:
        """Analytics sp√©cifiques aux actions"""
        stock_items = [i for i in items if i.category == 'Actions']
        
        if not stock_items:
            return {
                'total_stocks': 0,
                'total_shares': 0,
                'total_value': 0,
                'by_exchange': {},
                'top_holdings': []
            }
        
        total_shares = sum(i.stock_quantity or 0 for i in stock_items)
        total_value = sum(i.asking_price or 0 for i in stock_items)
        
        # Grouper par bourse
        by_exchange = {}
        for item in stock_items:
            exchange = item.stock_exchange or 'Unknown'
            if exchange not in by_exchange:
                by_exchange[exchange] = {'count': 0, 'value': 0}
            by_exchange[exchange]['count'] += 1
            by_exchange[exchange]['value'] += item.asking_price or 0
        
        # Top holdings par valeur
        top_holdings = sorted(
            stock_items,
            key=lambda x: x.asking_price or 0,
            reverse=True
        )[:5]
        
        return {
            'total_stocks': len(stock_items),
            'total_shares': total_shares,
            'total_value': total_value,
            'average_holding_value': total_value / len(stock_items) if stock_items else 0,
            'by_exchange': by_exchange,
            'top_holdings': [
                {
                    'symbol': h.stock_symbol,
                    'name': h.name,
                    'quantity': h.stock_quantity,
                    'value': h.asking_price
                }
                for h in top_holdings
            ]
        }

# Classe pour la recherche s√©mantique RAG
class SemanticSearchRAG:
    """Moteur de recherche s√©mantique avec RAG"""
    
    def __init__(self, openai_client):
        self.client = openai_client
        self.embedding_model = "text-embedding-3-small"
    
    def get_query_embedding(self, query: str) -> Optional[List[float]]:
        """G√©n√®re l'embedding pour une requ√™te"""
        if not self.client:
            return None
        
        try:
            response = self.client.embeddings.create(
                input=query,
                model=self.embedding_model
            )
            return response.data[0].embedding
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration embedding: {e}")
            return None
    
    def semantic_search(self, query: str, items: List[CollectionItem], top_k: int = 10) -> List[Tuple[CollectionItem, float]]:
        """Recherche s√©mantique dans les items"""
        query_embedding = self.get_query_embedding(query)
        if not query_embedding:
            logger.warning("Impossible de g√©n√©rer l'embedding pour la requ√™te")
            return []
        
        # V√©rifier combien d'items ont des embeddings
        items_with_embeddings = [item for item in items if item.embedding]
        logger.info(f"Items avec embeddings: {len(items_with_embeddings)}/{len(items)}")
        
        if not items_with_embeddings:
            logger.error("Aucun item n'a d'embedding ! La recherche s√©mantique ne peut pas fonctionner.")
            return []
        
        # Calculer les similarit√©s cosinus
        similarities = []
        for item in items_with_embeddings:
            try:
                similarity = self._cosine_similarity(query_embedding, item.embedding)
                similarities.append((item, similarity))
            except Exception as e:
                logger.warning(f"Erreur calcul similarit√© pour {item.name}: {e}")
                continue
        
        # Trier par similarit√© d√©croissante
        similarities.sort(key=lambda x: x[1], reverse=True)
        
        # Retourner top_k r√©sultats
        return similarities[:top_k]
    
    def _cosine_similarity(self, vec1: List[float], vec2: List[float]) -> float:
        """Calcule la similarit√© cosinus entre deux vecteurs"""
        vec1_np = np.array(vec1).reshape(1, -1)
        vec2_np = np.array(vec2).reshape(1, -1)
        return cosine_similarity(vec1_np, vec2_np)[0][0]
    
    def generate_embedding_for_item(self, item: CollectionItem) -> Optional[List[float]]:
        """G√©n√®re l'embedding pour un item"""
        if not self.client:
            return None
        
        # Cr√©er le texte √† encoder - INCLURE LES INFOS ACTIONS
        text_parts = [
            f"Nom: {item.name}",
            f"Cat√©gorie: {item.category}",
            f"Statut: {item.status}",
        ]
        
        if item.construction_year:
            text_parts.append(f"Ann√©e: {item.construction_year}")
        
        if item.condition:
            text_parts.append(f"√âtat: {item.condition}")
        
        if item.description:
            text_parts.append(f"Description: {item.description}")
        
        if item.for_sale:
            text_parts.append("En vente actuellement")
        
        if item.sale_status:
            text_parts.append(f"Statut de vente: {item.sale_status}")
        
        if item.asking_price:
            text_parts.append(f"Prix demand√©: {item.asking_price} CHF")
        
        if item.sold_price:
            text_parts.append(f"Prix de vente: {item.sold_price} CHF")
        
        # Informations sp√©cifiques aux actions
        if item.category == 'Actions':
            if item.stock_symbol:
                text_parts.append(f"Symbole boursier: {item.stock_symbol}")
            if item.stock_quantity:
                text_parts.append(f"Quantit√©: {item.stock_quantity} actions")
            if item.stock_exchange:
                text_parts.append(f"Bourse: {item.stock_exchange}")
            if item.current_price:
                text_parts.append(f"Prix actuel: {item.current_price} CHF")
        
        text = ". ".join(text_parts)
        
        try:
            response = self.client.embeddings.create(
                input=text,
                model=self.embedding_model
            )
            return response.data[0].embedding
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration embedding item: {e}")
            return None

# Moteur d'IA OpenAI Pure avec RAG
class PureOpenAIEngineWithRAG:
    """Moteur d'IA utilisant OpenAI GPT-4 avec recherche s√©mantique RAG"""
    
    def __init__(self, client):
        self.client = client
        self.semantic_search = SemanticSearchRAG(client) if client else None
    
    def detect_query_intent(self, query: str) -> QueryIntent:
        """D√©tecte l'intention de la requ√™te"""
        query_lower = query.lower()
        
        # Mots-cl√©s pour la recherche s√©mantique - √âLARGI
        semantic_keywords = [
            'trouve', 'cherche', 'montre', 'affiche', 'liste',
            'combien', 'quel', 'quels', 'quelle', 'quelles',
            'o√π', 'qui', 'avec', 'comme', 'similaire',
            'ai-je', 'j\'ai', 'mes', 'ma', 'mon',
            'allemande', 'italienne', 'fran√ßaise', 'japonaise',
            'porsche', 'ferrari', 'lamborghini', 'bmw', 'mercedes',
            'actions', 'bourse', 'portefeuille', 'symbole'
        ]
        
        # Forcer la recherche s√©mantique pour les questions sur les quantit√©s et marques
        if 'combien' in query_lower or any(word in query_lower for word in ['porsche', 'allemande', 'italienne', 'actions', 'bourse']):
            logger.info(f"Intent d√©tect√©: SEMANTIC_SEARCH pour '{query}'")
            return QueryIntent.SEMANTIC_SEARCH
        
        # V√©rifier si c'est une recherche s√©mantique
        if any(keyword in query_lower for keyword in semantic_keywords):
            logger.info(f"Intent d√©tect√©: SEMANTIC_SEARCH pour '{query}'")
            return QueryIntent.SEMANTIC_SEARCH
        
        # Autres intentions existantes
        if any(word in query_lower for word in ['vente', 'n√©gociation', 'offre', 'pipeline']):
            return QueryIntent.SALE_PROGRESS_TRACKING
        
        if any(word in query_lower for word in ['financ', 'roi', 'profit', 'rentab']):
            return QueryIntent.FINANCIAL_ANALYSIS
        
        if any(word in query_lower for word in ['voiture', 'montre', 'bateau', 'avion']):
            return QueryIntent.VEHICLE_ANALYSIS
        
        return QueryIntent.UNKNOWN
    
    def generate_response(self, query: str, items: List[CollectionItem], analytics: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse via OpenAI GPT-4 avec RAG"""
        
        if not self.client:
            return "‚ùå Moteur IA Indisponible"
        
        # Toujours utiliser la recherche s√©mantique si on a des embeddings
        items_with_embeddings = sum(1 for item in items if item.embedding)
        if items_with_embeddings > 0:
            logger.info(f"Utilisation de la recherche s√©mantique pour: '{query}'")
            return self._generate_semantic_response(query, items, analytics)
        
        # Sinon fallback sur l'ancienne m√©thode
        logger.info(f"Pas d'embeddings, utilisation de la m√©thode classique")
        
        # Cache et m√©thode classique...
        cache_key = hashlib.md5(f"{query}{len(items)}{json.dumps(analytics.get('basic_metrics', {}), sort_keys=True)}".encode()).hexdigest()[:12]
        cached_response = smart_cache.get('ai_responses', cache_key)
        if cached_response:
            return cached_response
        
        try:
            # Construire le contexte complet
            context = self._build_complete_context(items, analytics)
            
            # Prompt syst√®me unifi√©
            system_prompt = """Tu es l'assistant IA expert de la collection BONVIN.
Tu as acc√®s √† toutes les donn√©es de la collection et tu fournis des analyses pr√©cises et contextualis√©es.
Tu r√©ponds TOUJOURS en fran√ßais de mani√®re STRUCTUR√âE et CONCISE.

R√àGLES:
1. Utilise TOUJOURS des donn√©es factuelles de la collection
2. Structure tes r√©ponses avec des titres et des listes
3. Sois PR√âCIS avec les chiffres et les d√©tails
4. Maximum 800 mots
5. Pas de formules de politesse g√©n√©riques
6. Utilise ton intelligence pour comprendre et contextualiser les donn√©es"""

            # Prompt utilisateur
            user_prompt = f"""QUESTION: {query}

DONN√âES COLLECTION BONVIN:
{context}

Analyse cette question et fournis une r√©ponse compl√®te et contextualis√©e bas√©e sur les donn√©es r√©elles de la collection.
Si la question concerne des v√©hicules, utilise ton intelligence pour d√©terminer leurs caract√©ristiques.
Sois cr√©atif dans ton analyse tout en restant factuel."""

            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.2,
                max_tokens=1000,
                timeout=30
            )
            
            ai_response = response.choices[0].message.content.strip()
            
            # Cache la r√©ponse
            smart_cache.set('ai_responses', ai_response, cache_key)
            
            return ai_response
            
        except Exception as e:
            logger.error(f"Erreur OpenAI: {e}")
            return "‚ùå Moteur IA Indisponible"
    
    def _generate_semantic_response(self, query: str, items: List[CollectionItem], analytics: Dict[str, Any]) -> str:
        """G√©n√®re une r√©ponse en utilisant la recherche s√©mantique RAG"""
        try:
            # V√©rifier d'abord si nous avons des embeddings
            items_with_embeddings = sum(1 for item in items if item.embedding)
            logger.info(f"Recherche s√©mantique - Items avec embeddings: {items_with_embeddings}/{len(items)}")
            
            if items_with_embeddings == 0:
                logger.warning("Aucun embedding disponible, bascule sur recherche par mots-cl√©s")
                return self._fallback_to_keyword_search(query, items)
            
            # Recherche s√©mantique
            semantic_results = self.semantic_search.semantic_search(query, items, top_k=15)
            
            if not semantic_results:
                logger.warning("Pas de r√©sultats s√©mantiques, bascule sur recherche par mots-cl√©s")
                return self._fallback_to_keyword_search(query, items)
            
            # Filtrer les r√©sultats pertinents (score > 0.5 au lieu de 0.7)
            relevant_results = [(item, score) for item, score in semantic_results if score > 0.5]
            
            if not relevant_results:
                # Si pas de r√©sultats tr√®s pertinents, prendre les 10 meilleurs
                relevant_results = semantic_results[:10]
            
            logger.info(f"R√©sultats s√©mantiques trouv√©s: {len(relevant_results)} items pertinents")
            
            # Construire le contexte RAG
            rag_context = self._build_rag_context(relevant_results, query)
            
            # Prompt pour GPT avec contexte RAG
            system_prompt = """Tu es l'assistant IA expert de la collection BONVIN avec capacit√©s de recherche s√©mantique avanc√©e.
Tu utilises les r√©sultats de recherche s√©mantique pour fournir des r√©ponses pr√©cises et contextualis√©es.

R√àGLES IMPORTANTES:
1. Base-toi sur les objets trouv√©s par la recherche s√©mantique
2. Si les scores sont faibles (<0.6), mentionne que la recherche est approximative
3. Structure ta r√©ponse de mani√®re claire avec des cat√©gories
4. Sois intelligent dans l'interpr√©tation - par exemple:
   - "montres" = chercher dans la cat√©gorie Montres
   - "en vente" = objets avec for_sale = true
   - "chers" = objets avec prix √©lev√©
   - Noms de marques = chercher ces marques sp√©cifiquement
   - "actions" = chercher dans la cat√©gorie Actions
   - "portefeuille" = analyser les actions et investissements
5. Utilise ton bon sens pour comprendre l'intention de l'utilisateur
6. Si peu de r√©sultats pertinents, √©largis ta recherche
7. Toujours donner le nombre exact trouv√©
8. Pour les questions de prix/valeur, additionne et calcule les totaux
9. Pour les actions, mentionne le symbole boursier et la quantit√© si disponibles"""

            user_prompt = f"""RECHERCHE DEMAND√âE: {query}

R√âSULTATS DE LA RECHERCHE S√âMANTIQUE (Tri√©s par pertinence):
{rag_context}

STATISTIQUES GLOBALES:
- Total objets dans la collection: {len(items)}
- Objets trouv√©s par la recherche: {len(relevant_results)}
- Score de pertinence moyen: {sum(score for _, score in relevant_results) / len(relevant_results):.2f}

Analyse ces r√©sultats et r√©ponds √† la recherche de l'utilisateur de mani√®re compl√®te et structur√©e.
Si la recherche concerne des caract√©ristiques sp√©cifiques (ex: "voitures 4 places"), utilise ton intelligence pour identifier ces caract√©ristiques."""

            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.3,
                max_tokens=1200,
                timeout=30
            )
            
            ai_response = response.choices[0].message.content.strip()
            
            # Ajouter un indicateur de recherche s√©mantique
            ai_response = f"üîç **Recherche intelligente activ√©e**\n\n{ai_response}"
            
            return ai_response
            
        except Exception as e:
            logger.error(f"Erreur recherche s√©mantique: {e}")
            return self._fallback_to_keyword_search(query, items)
    
    def _build_rag_context(self, results: List[Tuple[CollectionItem, float]], query: str) -> str:
        """Construit le contexte pour RAG"""
        context_parts = []
        
        for i, (item, score) in enumerate(results, 1):
            context_parts.append(f"\n{i}. **{item.name}** (Pertinence: {score:.2%})")
            context_parts.append(f"   - Cat√©gorie: {item.category}")
            context_parts.append(f"   - Statut: {'Disponible' if item.status == 'Available' else 'Vendu'}")
            
            if item.for_sale:
                context_parts.append(f"   - üî• EN VENTE")
                if item.sale_status:
                    context_parts.append(f"   - Progression vente: {item.sale_status}")
            
            if item.construction_year:
                context_parts.append(f"   - Ann√©e: {item.construction_year}")
            
            if item.condition:
                context_parts.append(f"   - √âtat: {item.condition}")
            
            if item.asking_price:
                context_parts.append(f"   - Prix demand√©: {item.asking_price:,.0f} CHF")
            
            if item.sold_price:
                context_parts.append(f"   - Prix de vente: {item.sold_price:,.0f} CHF")
            
            if item.current_offer:
                context_parts.append(f"   - Offre actuelle: {item.current_offer:,.0f} CHF")
            
            # Informations sp√©cifiques aux actions
            if item.category == 'Actions':
                if item.stock_symbol:
                    context_parts.append(f"   - Symbole boursier: {item.stock_symbol}")
                if item.stock_quantity:
                    context_parts.append(f"   - Quantit√©: {item.stock_quantity} actions")
                if item.stock_exchange:
                    context_parts.append(f"   - Bourse: {item.stock_exchange}")
                if item.stock_purchase_price:
                    context_parts.append(f"   - Prix d'achat unitaire: {item.stock_purchase_price:,.0f} CHF")
                if item.current_price:
                    context_parts.append(f"   - Prix actuel: {item.current_price:,.0f} CHF/action")
            
            if item.description:
                # Extraire les parties pertinentes de la description
                desc_preview = item.description[:150] + "..." if len(item.description) > 150 else item.description
                context_parts.append(f"   - Description: {desc_preview}")
            
            # Informations sp√©cifiques selon la cat√©gorie
            if item.category == "Appartements / maison" and item.surface_m2:
                context_parts.append(f"   - Surface: {item.surface_m2} m¬≤")
                if item.rental_income_chf:
                    context_parts.append(f"   - Revenus locatifs: {item.rental_income_chf:,.0f} CHF/mois")
        
        return "\n".join(context_parts)
    
    def _fallback_to_keyword_search(self, query: str, items: List[CollectionItem]) -> str:
        """Recherche par mots-cl√©s si la recherche s√©mantique √©choue"""
        query_lower = query.lower()
        
        # D√©tecter les intentions sp√©cifiques
        car_brands = {
            'allemandes': ['porsche', 'bmw', 'mercedes', 'audi', 'volkswagen'],
            'italiennes': ['ferrari', 'lamborghini', 'maserati', 'alfa romeo'],
            'fran√ßaises': ['peugeot', 'renault', 'citro√´n', 'bugatti'],
            'japonaises': ['toyota', 'honda', 'nissan', 'mazda', 'lexus'],
            'anglaises': ['rolls', 'bentley', 'aston martin', 'jaguar', 'mini']
        }
        
        # Recherche intelligente selon le contexte
        matching_items = []
        
        # Recherche sp√©cifique pour les actions
        if 'action' in query_lower or 'bourse' in query_lower or 'portefeuille' in query_lower:
            matching_items = [item for item in items if item.category == "Actions"]
        else:
            # Recherche par mots-cl√©s standard
            keywords = query_lower.split()
            for item in items:
                item_text = f"{item.name} {item.category} {item.description or ''} {item.status}".lower()
                if item.stock_symbol:
                    item_text += f" {item.stock_symbol}".lower()
                if any(keyword in item_text for keyword in keywords):
                    matching_items.append(item)
        
        if not matching_items:
            return f"""
üîç **Aucun r√©sultat trouv√©**

Je n'ai trouv√© aucun objet correspondant √† votre recherche "{query}".

üí° **Note importante:** Il semble que les embeddings ne soient pas correctement configur√©s. 
Pour une recherche intelligente optimale, assurez-vous que tous les objets ont des embeddings g√©n√©r√©s.

üìä **Statistiques rapides:**
- Total objets: {len(items)}
- Cat√©gories disponibles: {', '.join(set(i.category for i in items if i.category))}
"""
        
        # Construire la r√©ponse
        response_parts = [f"üîç **R√©sultats pour:** {query}\n"]
        response_parts.append(f"J'ai trouv√© **{len(matching_items)} objets**:\n")
        
        # Grouper par cat√©gorie
        by_category = {}
        for item in matching_items:
            cat = item.category or "Autre"
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append(item)
        
        for category, cat_items in by_category.items():
            response_parts.append(f"\n**{category}** ({len(cat_items)} objets):")
            for item in cat_items[:5]:
                status = "‚úÖ Disponible" if item.status == "Available" else "üè∑Ô∏è Vendu"
                price = ""
                if item.asking_price:
                    price = f" - {item.asking_price:,.0f} CHF"
                elif item.sold_price:
                    price = f" - Vendu: {item.sold_price:,.0f} CHF"
                
                for_sale = " üî• EN VENTE" if item.for_sale else ""
                response_parts.append(f"- {item.name} ({item.construction_year or 'N/A'}) {status}{price}{for_sale}")
                
                # D√©tails sp√©cifiques aux actions
                if item.category == "Actions" and item.stock_symbol:
                    response_parts.append(f"  ‚Üí Symbole: {item.stock_symbol}, Quantit√©: {item.stock_quantity or 'N/A'}")
                    if item.current_price:
                        response_parts.append(f"  ‚Üí Prix actuel: {item.current_price:,.0f} CHF/action")
            
            if len(cat_items) > 5:
                response_parts.append(f"  ... et {len(cat_items) - 5} autres")
        
        return "\n".join(response_parts)
    
    def _build_complete_context(self, items: List[CollectionItem], analytics: Dict[str, Any]) -> str:
        """Construit un contexte complet pour l'IA"""
        context_parts = []
        
        # Vue d'ensemble
        basic = analytics.get('basic_metrics', {})
        context_parts.append(f"=== VUE D'ENSEMBLE ===")
        context_parts.append(f"Total objets: {basic.get('total_items', 0)}")
        context_parts.append(f"Disponibles: {basic.get('available_items', 0)}")
        context_parts.append(f"Vendus: {basic.get('sold_items', 0)}")
        context_parts.append(f"En vente: {basic.get('items_for_sale', 0)}")
        
        # M√©triques financi√®res
        financial = analytics.get('financial_metrics', {})
        context_parts.append(f"\n=== M√âTRIQUES FINANCI√àRES ===")
        context_parts.append(f"Valeur portefeuille: {financial.get('portfolio_value', 0):,.0f} CHF")
        context_parts.append(f"CA r√©alis√©: {financial.get('realized_sales', 0):,.0f} CHF")
        context_parts.append(f"ROI: {financial.get('roi_percentage', 0):.1f}%")
        context_parts.append(f"Profit total: {financial.get('total_profit', 0):,.0f} CHF")
        
        # Analytics actions si disponibles
        stock_analytics = analytics.get('stock_analytics', {})
        if stock_analytics.get('total_stocks', 0) > 0:
            context_parts.append(f"\n=== PORTEFEUILLE ACTIONS ===")
            context_parts.append(f"Nombre d'actions diff√©rentes: {stock_analytics.get('total_stocks', 0)}")
            context_parts.append(f"Total actions d√©tenues: {stock_analytics.get('total_shares', 0)}")
            context_parts.append(f"Valeur totale: {stock_analytics.get('total_value', 0):,.0f} CHF")
        
        # Liste d√©taill√©e des objets
        context_parts.append(f"\n=== INVENTAIRE D√âTAILL√â ===")
        
        # Grouper par cat√©gorie
        categories = {}
        for item in items:
            cat = item.category or 'Autre'
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(item)
        
        for category, cat_items in categories.items():
            context_parts.append(f"\n{category.upper()} ({len(cat_items)} objets):")
            
            # Trier par statut
            for_sale = [i for i in cat_items if i.for_sale]
            available = [i for i in cat_items if i.status == 'Available' and not i.for_sale]
            sold = [i for i in cat_items if i.status == 'Sold']
            
            if for_sale:
                context_parts.append("EN VENTE:")
                for item in for_sale:
                    context_parts.append(f"- {item.name} ({item.construction_year or 'N/A'})")
                    if item.asking_price:
                        context_parts.append(f"  Prix: {item.asking_price:,.0f} CHF")
                    if item.sale_status:
                        context_parts.append(f"  Statut: {item.sale_status}")
                    if item.current_offer:
                        context_parts.append(f"  Offre actuelle: {item.current_offer:,.0f} CHF")
                    # D√©tails sp√©cifiques aux actions
                    if item.category == 'Actions' and item.stock_symbol:
                        context_parts.append(f"  Symbole: {item.stock_symbol}")
                        context_parts.append(f"  Quantit√©: {item.stock_quantity} actions")
                        if item.current_price:
                            context_parts.append(f"  Prix actuel: {item.current_price:,.0f} CHF/action")
            
            if available:
                context_parts.append("DISPONIBLES:")
                for item in available[:5]:  # Limiter pour ne pas surcharger
                    context_parts.append(f"- {item.name} ({item.construction_year or 'N/A'})")
                    if item.category == 'Actions' and item.stock_symbol:
                        context_parts.append(f"  ‚Üí {item.stock_symbol}: {item.stock_quantity} actions")
                        if item.current_price:
                            context_parts.append(f"  ‚Üí Prix actuel: {item.current_price:,.0f} CHF/action")
                if len(available) > 5:
                    context_parts.append(f"... et {len(available) - 5} autres")
            
            if sold:
                context_parts.append("VENDUS:")
                for item in sold[:3]:  # Limiter
                    context_parts.append(f"- {item.name}")
                    if item.sold_price:
                        context_parts.append(f"  Vendu: {item.sold_price:,.0f} CHF")
                if len(sold) > 3:
                    context_parts.append(f"... et {len(sold) - 3} autres")
        
        # Pipeline de vente
        pipeline = analytics.get('sales_pipeline', {})
        if pipeline.get('stages'):
            context_parts.append(f"\n=== PIPELINE DE VENTE ===")
            for stage_data in pipeline['stages'].values():
                if stage_data['count'] > 0:
                    context_parts.append(f"{stage_data['name']}: {stage_data['count']} objets ({stage_data['total_value']:,.0f} CHF)")
        
        return "\n".join(context_parts)

# Instance du moteur IA avec RAG
ai_engine = PureOpenAIEngineWithRAG(openai_client) if openai_client else None

# Routes
@app.route("/")
def index():
    """Page principale de l'application"""
    return render_template('index.html')

@app.route("/analytics")
def analytics():
    """Page analytics avec diagrammes et statistiques"""
    return render_template('analytics.html')

@app.route("/health")
def health():
    """Health check"""
    try:
        items = AdvancedDataManager.fetch_all_items()
        
        health_data = {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "app_url": APP_URL,
            "services": {
                "supabase": "connected" if supabase else "disconnected",
                "openai": "connected" if openai_client else "disconnected",
                "ai_engine": "active_with_rag" if ai_engine else "inactive",
                "gmail_notifications": "enabled" if gmail_manager.enabled else "disabled",
                "finnhub": "configured" if FINNHUB_API_KEY else "not_configured"
            },
            "data_status": {
                "items_count": len(items),
                "cache_active": smart_cache._caches['items']['data'] is not None,
                "last_update": items[0].updated_at if items else None,
                "embeddings_ready": sum(1 for item in items if item.embedding) if items else 0,
                "stocks_count": len([i for i in items if i.category == "Actions"])
            },
            "ai_mode": "openai_gpt4_with_semantic_rag",
            "stock_apis": {
                "yahoo_finance": "available",
                "finnhub": "configured" if FINNHUB_API_KEY else "not_configured"
            }
        }
        
        return jsonify(health_data)
        
    except Exception as e:
        logger.error(f"Erreur health: {e}")
        return jsonify({
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }), 500

@app.route("/api/analytics/advanced")
def advanced_analytics():
    """Analytics sophistiqu√©es"""
    try:
        items = AdvancedDataManager.fetch_all_items()
        analytics = AdvancedDataManager.calculate_advanced_analytics(items)
        
        return jsonify({
            "analytics": analytics,
            "metadata": {
                "items_analyzed": len(items),
                "generated_at": datetime.now().isoformat(),
                "cache_status": "hit" if smart_cache.get('analytics') else "miss"
            }
        })
        
    except Exception as e:
        logger.error(f"Erreur analytics: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/api/items", methods=["GET"])
def get_items():
    """R√©cup√®re tous les objets"""
    try:
        items = AdvancedDataManager.fetch_all_items()
        return jsonify([item.to_dict() for item in items])
    except Exception as e:
        logger.error(f"Erreur get_items: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/api/items", methods=["POST"])
def create_item():
    """Cr√©e un objet avec notification Gmail et g√©n√©ration d'embedding"""
    if not supabase:
        return jsonify({"error": "Supabase non connect√©"}), 500
    
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Donn√©es manquantes"}), 400
        
        # Validation sp√©cifique pour les actions
        if data.get('category') == 'Actions':
            if not data.get('stock_symbol'):
                return jsonify({"error": "Le symbole boursier est requis pour les actions"}), 400
        
        # Enrichissement
        data['created_at'] = datetime.now().isoformat()
        data['updated_at'] = datetime.now().isoformat()
        
        # G√©n√©rer l'embedding si OpenAI disponible
        if ai_engine and ai_engine.semantic_search:
            # Ajouter un ID temporaire pour cr√©er l'objet
            temp_data = data.copy()
            temp_data['id'] = 0  # ID temporaire pour la cr√©ation de l'objet
            temp_item = CollectionItem.from_dict(temp_data)
            embedding = ai_engine.semantic_search.generate_embedding_for_item(temp_item)
            if embedding:
                data['embedding'] = embedding
                logger.info("‚úÖ Embedding g√©n√©r√© pour le nouvel objet")
        
        # Ne pas inclure l'ID dans l'insertion Supabase
        if 'id' in data:
            del data['id']
        
        response = supabase.table("items").insert(data).execute()
        if response.data:
            smart_cache.invalidate('items')
            smart_cache.invalidate('analytics')
            
            # Notification Gmail pour nouvel objet
            gmail_manager.notify_item_created(response.data[0])
            
            return jsonify(response.data[0]), 201
        else:
            return jsonify({"error": "Erreur lors de la cr√©ation"}), 500
            
    except Exception as e:
        logger.error(f"Erreur cr√©ation item: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/api/items/<int:item_id>", methods=["PUT"])
def update_item(item_id):
    """Met √† jour un objet avec notifications Gmail et mise √† jour de l'embedding"""
    if not supabase:
        return jsonify({"error": "Supabase non connect√©"}), 500
    
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Donn√©es manquantes"}), 400
        
        # R√©cup√©rer l'ancien √©tat avant modification
        old_response = supabase.table("items").select("*").eq("id", item_id).execute()
        old_data = old_response.data[0] if old_response.data else {}
        
        # Nettoyage sophistiqu√© des donn√©es
        cleaned_data = clean_update_data(data)
        cleaned_data['updated_at'] = datetime.now().isoformat()
        
        # V√©rifier si l'embedding doit √™tre mis √† jour
        should_update_embedding = False
        embedding_fields = ['name', 'category', 'description', 'status', 'construction_year', 
                          'condition', 'for_sale', 'sale_status', 'stock_symbol', 'stock_quantity', 'current_price',
        'stock_volume', 'stock_pe_ratio', 'stock_52_week_high', 'stock_52_week_low',
        'stock_change', 'stock_change_percent', 'stock_average_volume']
        
        for field in embedding_fields:
            if field in cleaned_data and old_data.get(field) != cleaned_data.get(field):
                should_update_embedding = True
                break
        
        # Mettre √† jour l'embedding si n√©cessaire
        if should_update_embedding and ai_engine and ai_engine.semantic_search:
            # Cr√©er un item temporaire avec les nouvelles donn√©es
            temp_data = {**old_data, **cleaned_data}
            temp_item = CollectionItem.from_dict(temp_data)
            new_embedding = ai_engine.semantic_search.generate_embedding_for_item(temp_item)
            if new_embedding:
                cleaned_data['embedding'] = new_embedding
                logger.info(f"‚úÖ Embedding mis √† jour pour l'objet {item_id}")
        
        response = supabase.table("items").update(cleaned_data).eq("id", item_id).execute()
        
        if response.data:
            smart_cache.invalidate('items')
            smart_cache.invalidate('analytics')
            
            new_data = response.data[0]
            
            # Notifications Gmail selon les changements
            
            # Changement de statut de vente sp√©cifique
            if old_data.get('sale_status') != new_data.get('sale_status') and new_data.get('for_sale'):
                gmail_manager.notify_sale_status_change(
                    new_data, 
                    old_data.get('sale_status', ''), 
                    new_data.get('sale_status', '')
                )
            
            # Nouvelle offre
            elif old_data.get('current_offer') != new_data.get('current_offer') and new_data.get('current_offer'):
                gmail_manager.notify_new_offer(new_data, new_data.get('current_offer'))
            
            # Autres changements importants
            else:
                gmail_manager.notify_item_updated(old_data, new_data)
            
            return jsonify(new_data)
        else:
            return jsonify({"error": f"Objet {item_id} non trouv√©"}), 404
            
    except Exception as e:
        logger.error(f"Erreur update_item {item_id}: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/api/items/<int:item_id>", methods=["DELETE"])
def delete_item(item_id):
    """Supprime un objet"""
    if not supabase:
        return jsonify({"error": "Supabase non connect√©"}), 500
    
    try:
        response = supabase.table("items").delete().eq("id", item_id).execute()
        smart_cache.invalidate('items')
        smart_cache.invalidate('analytics')
        return "", 204
    except Exception as e:
        logger.error(f"Erreur delete_item: {e}")
        return jsonify({"error": str(e)}), 500

def format_stock_value(value, is_price=False, is_percent=False, is_volume=False):
    """
    Formate les valeurs des actions avec gestion des valeurs manquantes
    """
    if value is None or value == '':
        return "N/A"
    if value == 0 and not is_volume:  # Les volumes peuvent √™tre 0
        return "N/A"
    if is_price:
        return round(float(value), 2)
    if is_percent:
        return round(float(value), 2)
    if is_volume:
        return int(value) if value > 0 else "N/A"
    return value

def get_live_exchange_rate(from_currency: str, to_currency: str = 'CHF') -> float:
    """
    R√©cup√®re le taux de change en direct en utilisant l'API FreeCurrency.
    Convertit une valeur de 'from_currency' vers 'to_currency'.
    """
    if from_currency == to_currency:
        return 1.0
    
    now = time.time()
    cache_key = f"forex_{from_currency}_{to_currency}"

    # 1. V√©rifier si le taux est en cache et valide
    if cache_key in forex_cache and now - forex_cache[cache_key]['timestamp'] < FOREX_CACHE_DURATION:
        return forex_cache[cache_key]['rate']

    # 2. Appel API FreeCurrency
    logger.info(f"üí∞ Appel API FreeCurrency pour {from_currency} -> {to_currency}")
    try:
        import requests
        url = f"https://api.freecurrencyapi.com/v1/latest?apikey={FREECURRENCY_API_KEY}&currencies={to_currency}&base_currency={from_currency}"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        rate = data.get('data', {}).get(to_currency)
        if rate:
            # Mettre √† jour le cache
            forex_cache[cache_key] = {'rate': rate, 'timestamp': now}
            return rate
        else:
            logger.warning(f"Taux de change non trouv√© pour {from_currency} -> {to_currency}")
            return 1.0
            
    except Exception as e:
        logger.error(f"Erreur API FreeCurrency: {e}. Utilisation d'un taux de 1.0")
        return 1.0


@app.route("/api/exchange-rate/<from_currency>/<to_currency>")
def get_exchange_rate_route(from_currency: str, to_currency: str = 'CHF'):
    """Route pour r√©cup√©rer le taux de change"""
    try:
        rate = get_live_exchange_rate(from_currency.upper(), to_currency.upper())
        return jsonify({
            "from_currency": from_currency.upper(),
            "to_currency": to_currency.upper(),
            "rate": rate,
            "last_update": datetime.now().isoformat()
        })
    except Exception as e:
        logger.error(f"Erreur taux de change: {e}")
        return jsonify({"error": str(e)}), 500


@app.route("/api/stock-price/<symbol>")
def get_stock_price(symbol):
    """
    R√©cup√®re le prix actuel d'une action, avec Yahoo Finance en priorit√©
    et EODHD/Finnhub comme alternatives robustes.
    """
    # V√©rifier si on force le refresh (ignore le cache)
    force_refresh = request.args.get('force_refresh', 'false').lower() == 'true'
    
    items = AdvancedDataManager.fetch_all_items()
    item = next((i for i in items if i.stock_symbol == symbol), None)

    if not item:
        logger.warning(f"Aucun item trouv√© pour le symbole {symbol}. L'API pourrait utiliser des hypoth√®ses par d√©faut.")

    # Formater le symbole correctement selon la bourse
    formatted_symbol = symbol
    if item and item.stock_exchange and item.stock_exchange.upper() in ['SWX', 'SIX', 'SWISS', 'CH']:
        # Pour les actions suisses, s'assurer d'avoir le suffixe .SW
        if not symbol.endswith('.SW'):
            formatted_symbol = f"{symbol}.SW"
            logger.info(f"Formatage du symbole suisse: {symbol} -> {formatted_symbol}")

    cache_key = f"stock_price_{symbol}"
    
    # Si on ne force pas le refresh, v√©rifier le cache
    if not force_refresh and cache_key in stock_price_cache:
        cached_data = stock_price_cache[cache_key]
        
        if time.time() - cached_data['timestamp'] < STOCK_PRICE_CACHE_DURATION:
            logger.info(f"Prix depuis le cache pour {symbol}")
            return jsonify(cached_data['data'])
    
    # Si on force le refresh, logger l'action
    if force_refresh:
        logger.info(f"Refresh forc√© pour {symbol} - cache ignor√©")

    try:
        # Exclure IREN de Yahoo Finance (cause des erreurs 429)
        if symbol.upper() == 'IREN' or symbol.upper() == 'IREN.SW':
            logger.info(f"IREN exclu de Yahoo Finance, bascule direct sur EODHD")
            return get_stock_price_eodhd(formatted_symbol, item, cache_key, force_refresh)
        
        import yfinance as yf
        # D√©lai plus long pour √©viter rate limiting Yahoo Finance
        time.sleep(3)
        ticker = yf.Ticker(formatted_symbol)
        info = ticker.info
        
        current_price = info.get('currentPrice') or info.get('regularMarketPrice')
        if not current_price:
             hist = ticker.history(period="1d")
             if not hist.empty:
                 current_price = hist['Close'].iloc[-1]

        if not current_price:
            raise Exception("Prix non trouv√© sur Yahoo Finance, essai avec EODHD")

        # R√©cup√©rer les variations depuis Yahoo Finance
        previous_close = info.get('previousClose', 0)
        change = 0
        change_percent = 0
        
        if previous_close and current_price:
            change = current_price - previous_close
            change_percent = (change / previous_close) * 100 if previous_close > 0 else 0
        else:
            # Essayer de r√©cup√©rer depuis les champs Yahoo Finance
            change = info.get('regularMarketChange', 0)
            change_percent = info.get('regularMarketChangePercent', 0)

        currency = info.get('currency', 'USD')
        # Pour les cartes, on garde le prix dans la devise originale
        # La conversion CHF sera utilis√©e uniquement pour le dashboard total
        price_chf = current_price

        # R√©cup√©rer les donn√©es historiques pour 52W plus pr√©cises
        try:
            hist = ticker.history(period="1y")
            if not hist.empty:
                actual_52w_high = hist['High'].max()
                actual_52w_low = hist['Low'].min()
                # Utiliser les donn√©es historiques si elles sont plus pr√©cises
                yahoo_52w_high = info.get('fiftyTwoWeekHigh')
                yahoo_52w_low = info.get('fiftyTwoWeekLow')
                
                # Comparer et choisir la meilleure valeur
                if yahoo_52w_high and abs(actual_52w_high - yahoo_52w_high) < 1:
                    final_52w_high = yahoo_52w_high
                else:
                    final_52w_high = actual_52w_high
                    
                if yahoo_52w_low and abs(actual_52w_low - yahoo_52w_low) < 1:
                    final_52w_low = yahoo_52w_low
                else:
                    final_52w_low = actual_52w_low
            else:
                final_52w_high = info.get('fiftyTwoWeekHigh')
                final_52w_low = info.get('fiftyTwoWeekLow')
        except:
            final_52w_high = info.get('fiftyTwoWeekHigh')
            final_52w_low = info.get('fiftyTwoWeekLow')

        result = {
            "symbol": symbol,
            "price": current_price,
            "price_chf": price_chf,
            "currency": currency,
            "company_name": info.get('longName', symbol),
            "last_update": datetime.now().isoformat(),
            "source": "Yahoo Finance (Taux de change via Finnhub)",
            "change": format_stock_value(change, is_price=True),
            "change_percent": format_stock_value(change_percent, is_percent=True),
            "volume": format_stock_value(info.get('volume'), is_volume=True),
            "average_volume": format_stock_value(info.get('averageVolume'), is_volume=True),
            "pe_ratio": format_stock_value(info.get('trailingPE'), is_price=True),
            "fifty_two_week_high": format_stock_value(final_52w_high, is_price=True),
            "fifty_two_week_low": format_stock_value(final_52w_low, is_price=True)
        }
        
        # Toujours mettre √† jour le cache, m√™me en cas de refresh forc√©
        stock_price_cache[cache_key] = {'data': result, 'timestamp': time.time()}
        return jsonify(result)

    except Exception as e:
        if "429" in str(e) or "rate limit" in str(e).lower():
            logger.warning(f"Rate limit Yahoo Finance pour {symbol}, utilisation du cache")
            if cache_key in stock_price_cache:
                logger.info(f"Retour des donn√©es en cache pour {symbol}")
                return jsonify(stock_price_cache[cache_key]['data'])
        
        logger.warning(f"Yahoo Finance a √©chou√© pour {symbol} ({e}), bascule sur EODHD.")
        
        # Essayer EODHD comme fallback
        logger.info(f"Essai avec EODHD pour {formatted_symbol}")
        return get_stock_price_eodhd(formatted_symbol, item, cache_key, force_refresh)


@app.route("/api/stock-price/cache/clear", methods=["POST"])
def clear_stock_price_cache():
    """
    Vide compl√®tement le cache des prix des actions
    """
    try:
        global stock_price_cache
        cache_size = len(stock_price_cache)
        stock_price_cache.clear()
        logger.info(f"Cache des prix des actions vid√© ({cache_size} entr√©es supprim√©es)")
        return jsonify({
            "success": True,
            "message": f"Cache vid√© avec succ√®s ({cache_size} entr√©es supprim√©es)",
            "cache_size_before": cache_size,
            "cache_size_after": 0
        })
    except Exception as e:
        logger.error(f"Erreur lors du vidage du cache: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500


@app.route("/api/stock-price/cache/status")
def get_stock_price_cache_status():
    """
    Retourne le statut du cache des prix des actions
    """
    try:
        cache_size = len(stock_price_cache)
        cache_keys = list(stock_price_cache.keys())
        
        # Calculer l'√¢ge des entr√©es en cache
        current_time = time.time()
        cache_ages = {}
        expired_entries = 0
        
        for key, data in stock_price_cache.items():
            age = current_time - data['timestamp']
            cache_ages[key] = age
            if age > STOCK_PRICE_CACHE_DURATION:
                expired_entries += 1
        
        return jsonify({
            "cache_size": cache_size,
            "cache_duration": STOCK_PRICE_CACHE_DURATION,
            "expired_entries": expired_entries,
            "cache_keys": cache_keys,
            "cache_ages": cache_ages,
            "eodhd_quota_warning": "‚ö†Ô∏è Quota EODHD probablement d√©pass√© (20 req/jour). Utilisez les prix manuels."
        })
    except Exception as e:
        logger.error(f"Erreur lors de la r√©cup√©ration du statut du cache: {e}")
        return jsonify({
            "error": str(e)
        }), 500

@app.route("/api/eodhd/quota")
def check_eodhd_quota():
    """V√©rifie le quota EODHD restant"""
    try:
        import requests
        # Test avec un symbole simple
        test_url = f"https://eodhd.com/api/real-time/AAPL?api_token={EODHD_API_KEY}&fmt=json"
        response = requests.get(test_url, timeout=5)
        
        if response.status_code == 402:
            return jsonify({
                "quota_exceeded": True,
                "message": "Quota EODHD d√©pass√© (20 requ√™tes/jour)",
                "reset_time": "Minuit (heure locale)",
                "suggestion": "Utilisez les prix manuels ou attendez le reset"
            })
        elif response.status_code == 200:
            return jsonify({
                "quota_exceeded": False,
                "message": "Quota EODHD disponible",
                "remaining_requests": "Inconnu (API ne fournit pas cette info)"
            })
        else:
            return jsonify({
                "quota_exceeded": "Unknown",
                "status_code": response.status_code,
                "message": f"Statut inattendu: {response.status_code}"
            })
            
    except Exception as e:
        return jsonify({
            "error": str(e),
            "message": "Impossible de v√©rifier le quota"
        }), 500


@app.route("/api/stock-price/update-all", methods=["POST"])
def update_all_stock_prices():
    """Met √† jour tous les prix d'actions dans la DB"""
    try:
        items = AdvancedDataManager.fetch_all_items()
        action_items = [item for item in items if item.category == 'Actions' and item.stock_symbol]
        
        if not action_items:
            return jsonify({
                "success": True,
                "message": "Aucune action trouv√©e √† mettre √† jour",
                "updated_count": 0
            })
        
        updated_count = 0
        errors = []
        
        for item in action_items:
            try:
                cache_key = f"stock_{item.stock_symbol}"
                # Forcer le refresh
                result = get_stock_price_eodhd(item.stock_symbol, item, cache_key, force_refresh=True)
                
                if hasattr(result, 'json'):
                    data = result.json
                    if isinstance(data, dict) and 'price' in data:
                        updated_count += 1
                        logger.info(f"‚úÖ Prix mis √† jour pour {item.name}: {data['price']} CHF")
                    else:
                        errors.append(f"Donn√©es invalides pour {item.name}")
                else:
                    errors.append(f"R√©ponse invalide pour {item.name}")
                    
            except Exception as e:
                error_msg = f"Erreur pour {item.name}: {str(e)}"
                errors.append(error_msg)
                logger.error(f"‚ùå {error_msg}")
        
        return jsonify({
            "success": True,
            "message": f"Mise √† jour termin√©e: {updated_count} actions mises √† jour",
            "updated_count": updated_count,
            "total_actions": len(action_items),
            "errors": errors
        })
        
    except Exception as e:
        logger.error(f"‚ùå Erreur mise √† jour globale: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500


def get_stock_price_eodhd(symbol: str, item: Optional[CollectionItem], cache_key: str, force_refresh=False):
    """
    R√©cup√®re le prix via l'API EODHD. Excellente pour les actions suisses.
    Limite: 20 requ√™tes par jour.
    """
    if not EODHD_API_KEY:
        return jsonify({"error": "Cl√© API EODHD non configur√©e"}), 500

    try:
        logger.info(f"Interrogation d'EODHD avec le symbole : {symbol}")
        
        import requests
        
        # Pour les actions suisses, essayer plusieurs variantes de symboles
        symbol_variants = [symbol]  # Commencer par le symbole fourni
        
        if item and item.stock_exchange and item.stock_exchange.upper() in ['SWX', 'SIX', 'SWISS', 'CH']:
            # Ajouter des variantes pour les actions suisses
            base_symbol = symbol.replace('.SW', '').replace('.SWX', '').replace('.SIX', '')
            symbol_variants.extend([
                f"{base_symbol}.SW",  # Format suisse standard
                f"{base_symbol}.SWX",  # Format SWX
                f"{base_symbol}.SIX",  # Format SIX
                base_symbol,  # Symbole sans suffixe
            ])
            # Supprimer les doublons
            symbol_variants = list(dict.fromkeys(symbol_variants))
        
        data = None
        working_symbol = symbol
        
        # Essayer chaque variante de symbole
        for variant in symbol_variants:
            logger.info(f"Essai EODHD avec le symbole: '{variant}'")
            quote_url = f"https://eodhd.com/api/real-time/{variant}?api_token={EODHD_API_KEY}&fmt=json"
            response = requests.get(quote_url, timeout=10)
            
            if response.status_code == 429:
                raise Exception("Rate limit EODHD atteint")
            
            if response.ok:
                response_data = response.json()
                if response_data and len(response_data) > 0:
                    data = response_data
                    working_symbol = variant
                    logger.info(f"‚úÖ Symbole EODHD '{variant}' fonctionne")
                    break
            else:
                logger.warning(f"Symbole EODHD '{variant}' invalide (status: {response.status_code})")
        
        # Si aucune variante n'a fonctionn√©
        if not data or len(data) == 0:
            raise Exception(f"Aucune donn√©e trouv√©e pour les variantes de '{symbol}' sur EODHD")
        
        # EODHD retourne un array, prendre le premier √©l√©ment
        quote = data[0] if isinstance(data, list) else data
        current_price = float(quote.get("close", 0))
        
        if current_price <= 0:
            raise Exception("Prix invalide re√ßu d'EODHD")
        
        # R√©cup√©rer la devise
        currency = quote.get("currency", "USD")
        # Pour les actions suisses, on suppose CHF
        if item and item.stock_exchange and item.stock_exchange.upper() in ['SWX', 'SIX', 'SWISS', 'CH']:
            currency = "CHF"
        
        # Pour les cartes, on garde le prix dans la devise originale
        price_chf = current_price
        
        # R√©cup√©rer les donn√©es fondamentales pour le PE ratio
        pe_ratio = "N/A"
        try:
            fundamental_url = f"https://eodhd.com/api/fundamentals/{working_symbol}?api_token={EODHD_API_KEY}&fmt=json"
            fundamental_response = requests.get(fundamental_url, timeout=10)
            
            if fundamental_response.ok:
                fundamental_data = fundamental_response.json()
                if fundamental_data and 'General' in fundamental_data:
                    general_data = fundamental_data['General']
                    if 'PERatio' in general_data and general_data['PERatio']:
                        pe_ratio = str(general_data['PERatio'])
                    logger.info(f"‚úÖ Donn√©es fondamentales EODHD r√©cup√©r√©es pour {working_symbol}")
        except Exception as e:
            logger.warning(f"Impossible de r√©cup√©rer les donn√©es fondamentales EODHD pour {working_symbol}: {e}")
        
        result = {
            "symbol": symbol,  # Garder le symbole original pour l'affichage
            "price": current_price,
            "price_chf": price_chf,
            "currency": currency,
            "company_name": quote.get("code", symbol),
            "last_update": datetime.now().isoformat(),
            "source": f"EODHD (symbole utilis√©: {working_symbol})",
            "change": format_stock_value(quote.get("change"), is_price=True),
            "change_percent": format_stock_value(quote.get("change_p"), is_percent=True),
            "volume": format_stock_value(quote.get("volume"), is_volume=True),
            "average_volume": format_stock_value(quote.get("avg_volume"), is_volume=True),
            "pe_ratio": pe_ratio,
            "fifty_two_week_high": format_stock_value(quote.get("high_52_weeks"), is_price=True),
            "fifty_two_week_low": format_stock_value(quote.get("low_52_weeks"), is_price=True)
        }
        
        logger.info(f"‚úÖ Prix EODHD r√©cup√©r√© pour {symbol}: {current_price} {currency}")
        
        # Mettre en cache
        stock_price_cache[cache_key] = {'data': result, 'timestamp': time.time()}
        
        # Mettre √† jour le prix dans la DB si c'est une action existante
        if item and item.id:
            try:
                update_data = {
                    'current_price': current_price,
                    'last_price_update': datetime.now().isoformat(),
                    'stock_volume': quote.get("volume"),
                    'stock_pe_ratio': pe_ratio if pe_ratio != "N/A" else None,
                    'stock_52_week_high': quote.get("high_52_weeks"),
                    'stock_52_week_low': quote.get("low_52_weeks"),
                    'stock_change': quote.get("change"),
                    'stock_change_percent': quote.get("change_p"),
                    'stock_average_volume': quote.get("avg_volume")
                }
                
                # Mettre √† jour dans Supabase
                if supabase:
                    response = supabase.table('items').update(update_data).eq('id', item.id).execute()
                    if response.data:
                        logger.info(f"‚úÖ Prix et m√©triques mis √† jour dans DB pour action {item.name} (ID: {item.id}): {current_price} CHF")
                        logger.info(f"üìä M√©triques: Volume={update_data['stock_volume']}, PE={update_data['stock_pe_ratio']}, 52W-H={update_data['stock_52_week_high']}, 52W-L={update_data['stock_52_week_low']}")
                    else:
                        logger.warning(f"‚ö†Ô∏è √âchec mise √† jour DB pour action {item.name} (ID: {item.id})")
            except Exception as e:
                logger.error(f"‚ùå Erreur mise √† jour DB pour action {item.name}: {e}")
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"Erreur EODHD pour {symbol}: {e}")
        
        # Utiliser le cache si disponible
        if cache_key in stock_price_cache:
            logger.info(f"Erreur API, retour des donn√©es en cache pour {symbol}")
            return jsonify(stock_price_cache[cache_key]['data'])
        
        return jsonify({
            "error": "Prix non disponible via EODHD", 
            "details": str(e),
            "message": "Veuillez mettre √† jour le prix manuellement."
        }), 500


@app.route("/api/market-price/<int:item_id>")
def market_price(item_id):
    """Estimation de prix via IA avec 3 objets similaires"""
    if not openai_client:
        return jsonify({"error": "Moteur IA Indisponible"}), 503
    
    try:
        items = AdvancedDataManager.fetch_all_items()
        target_item = next((item for item in items if item.id == item_id), None)
        
        if not target_item:
            return jsonify({"error": "Objet non trouv√©"}), 404
        
        # Analyse de march√© avec objets similaires
        similar_items = [i for i in items if i.category == target_item.category and i.id != item_id]
        comparable_prices = [i.sold_price or i.asking_price for i in similar_items if i.sold_price or i.asking_price]
        
        # Tri des objets similaires par pertinence
        similar_items_with_prices = [
            i for i in similar_items 
            if (i.sold_price or i.asking_price) and i.construction_year
        ]
        
        # Calcul de score de similarit√© bas√© sur l'ann√©e et la cat√©gorie
        def similarity_score(item):
            score = 100
            if target_item.construction_year and item.construction_year:
                year_diff = abs(target_item.construction_year - item.construction_year)
                score -= year_diff * 2  # P√©nalit√© de 2 points par ann√©e d'√©cart
            return score
        
        # Tri par score de similarit√©
        similar_items_sorted = sorted(similar_items_with_prices, key=similarity_score, reverse=True)
        top_3_similar = similar_items_sorted[:3]
        
        market_context = ""
        if comparable_prices:
            avg_price = sum(comparable_prices) / len(comparable_prices)
            market_context = f"Prix moyen cat√©gorie: {avg_price:,.0f} CHF (sur {len(comparable_prices)} objets)"
        
        # Contexte des 3 objets similaires
        similar_context = ""
        if top_3_similar:
            similar_context = "\n\nOBJETS SIMILAIRES DANS LA COLLECTION:"
            for i, similar_item in enumerate(top_3_similar, 1):
                price = similar_item.sold_price or similar_item.asking_price
                status = "Vendu" if similar_item.sold_price else "Prix demand√©"
                similar_context += f"\n{i}. {similar_item.name} ({similar_item.construction_year or 'N/A'}) - {status}: {price:,.0f} CHF"
                if similar_item.description:
                    similar_context += f" - {similar_item.description[:80]}..."
        
        # Prompt adapt√© selon la cat√©gorie
        if target_item.category == 'Actions':
            prompt = f"""Estime la valeur actuelle de cette position boursi√®re en CHF :

POSITION √Ä √âVALUER:
- Nom: {target_item.name}
- Symbole: {target_item.stock_symbol or 'N/A'}
- Quantit√©: {target_item.stock_quantity or 1} actions
- Bourse: {target_item.stock_exchange or 'Non sp√©cifi√©e'}
- Prix d'achat unitaire: {target_item.stock_purchase_price or 'N/A'} CHF
- Prix actuel connu: {target_item.current_price or 'N/A'} CHF/action
- Description: {target_item.description or 'N/A'}

INSTRUCTIONS:
1. Si un prix actuel est fourni, utilise-le pour calculer la valeur totale
2. Sinon, recherche le cours actuel de l'action {target_item.stock_symbol}
3. Calcule la valeur totale de la position (cours actuel √ó quantit√©)
4. Compare avec le prix d'achat pour calculer la plus/moins-value
5. Analyse les perspectives du titre

R√©ponds en JSON avec:
- estimated_price (valeur totale actuelle de la position en CHF)
- reasoning (analyse d√©taill√©e)
- comparable_items (3 actions similaires du march√©)
- confidence_score (0.1-0.9)
- market_trend (hausse/stable/baisse)"""
        else:
            prompt = f"""Estime le prix de march√© actuel de cet objet en CHF en te basant sur le march√© r√©el :

OBJET √Ä √âVALUER:
- Nom: {target_item.name}
- Cat√©gorie: {target_item.category}
- Ann√©e: {target_item.construction_year or 'N/A'}
- √âtat: {target_item.condition or 'N/A'}
- Description: {target_item.description or 'N/A'}

INSTRUCTIONS IMPORTANTES:
1. Recherche les prix actuels du march√© pour ce mod√®le exact ou des mod√®les tr√®s similaires
2. Utilise tes connaissances du march√© automobile/horloger/immobilier actuel
3. Compare avec des ventes r√©centes d'objets similaires sur le march√© (pas dans ma collection)
4. Prends en compte l'ann√©e, l'√©tat et les sp√©cificit√©s du mod√®le

Pour les voitures : consid√®re les sites comme AutoScout24, Comparis, annonces sp√©cialis√©es
Pour les montres : march√© des montres d'occasion, chrono24, ench√®res r√©centes
Pour l'immobilier : prix au m¬≤ dans la r√©gion, transactions r√©centes

R√©ponds en JSON avec:
- estimated_price (nombre en CHF bas√© sur le march√© actuel)
- reasoning (explication d√©taill√©e en fran√ßais avec r√©f√©rences de march√©)
- comparable_items (array avec EXACTEMENT 3 objets comparables du MARCH√â EXTERNE avec:
  - name: nom exact du mod√®le comparable
  - year: ann√©e
  - price: prix de march√© actuel ou de vente r√©cente
  - source: source de l'information (ex: "AutoScout24", "Vente aux ench√®res Christie's", "March√© suisse de l'occasion")
  - comparison_reason: pourquoi cet objet est comparable
)
- confidence_score (0.1-0.9)
- market_trend (hausse/stable/baisse)
- price_range (objet avec min et max bas√©s sur le march√©)"""

        response = openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": "Tu es un expert en √©valuation d'objets de luxe et d'actifs financiers avec une connaissance approfondie du march√©. R√©ponds en JSON."},
                {"role": "user", "content": prompt}
            ],
            response_format={"type": "json_object"},
            max_tokens=800,
            timeout=20
        )
        
        result = json.loads(response.choices[0].message.content)
        
        # Enrichir avec les donn√©es de march√© r√©elles
        result['market_analysis'] = {
            'comparable_items_count': len(similar_items),
            'average_category_price': sum(comparable_prices) / len(comparable_prices) if comparable_prices else 0,
            'price_range_market': [min(comparable_prices), max(comparable_prices)] if comparable_prices else [0, 0],
            'top_3_similar_actual': [
                {
                    'name': item.name,
                    'year': item.construction_year,
                    'price': item.sold_price or item.asking_price,
                    'status': 'sold' if item.sold_price else 'asking'
                }
                for item in top_3_similar
            ]
        }
        
        return jsonify(result)
        
    except Exception as e:
        logger.error(f"Erreur market_price: {e}")
        return jsonify({"error": "Moteur IA Indisponible"}), 500

@app.route("/api/chatbot", methods=["POST"])
def chatbot():
    """Chatbot utilisant OpenAI GPT-4 avec recherche s√©mantique RAG"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({"error": "Donn√©es requises"}), 400
        
        query = data.get("message", "").strip()
        if not query:
            return jsonify({"error": "Message requis"}), 400
        
        # R√©cup√©ration des donn√©es
        items = AdvancedDataManager.fetch_all_items()
        analytics = AdvancedDataManager.calculate_advanced_analytics(items)
        
        logger.info(f"üéØ Requ√™te: '{query}'")
        
        if ai_engine:
            # G√©n√©ration de r√©ponse via OpenAI avec RAG
            response = ai_engine.generate_response(query, items, analytics)
            
            # D√©tecter si la recherche s√©mantique a √©t√© utilis√©e
            search_type = "semantic" if "üîç **Recherche intelligente activ√©e**" in response else "standard"
            
            return jsonify({
                "reply": response,
                "metadata": {
                    "items_analyzed": len(items),
                    "ai_engine": "openai_gpt4_with_rag",
                    "mode": "pure_with_semantic_search",
                    "search_type": search_type,
                    "embeddings_available": sum(1 for item in items if item.embedding),
                    "stocks_count": len([i for i in items if i.category == "Actions"])
                }
            })
        else:
            return jsonify({
                "reply": "‚ùå Moteur IA Indisponible",
                "metadata": {
                    "ai_engine": "unavailable"
                }
            })
        
    except Exception as e:
        logger.error(f"Erreur chatbot: {e}")
        return jsonify({
            "reply": "‚ùå Moteur IA Indisponible",
            "error": str(e)
        }), 500

@app.route("/api/embeddings/generate", methods=["POST"])
def generate_embeddings():
    """G√©n√®re les embeddings pour tous les objets qui n'en ont pas"""
    if not ai_engine or not ai_engine.semantic_search:
        return jsonify({"error": "Moteur de recherche s√©mantique non disponible"}), 503
    
    try:
        items = AdvancedDataManager.fetch_all_items()
        items_without_embedding = [item for item in items if not item.embedding]
        
        if not items_without_embedding:
            return jsonify({
                "message": "Tous les objets ont d√©j√† un embedding",
                "total_items": len(items),
                "items_with_embedding": len(items)
            })
        
        success_count = 0
        errors = []
        
        for item in items_without_embedding:
            try:
                # G√©n√©rer l'embedding
                embedding = ai_engine.semantic_search.generate_embedding_for_item(item)
                
                if embedding:
                    # Sauvegarder dans Supabase
                    supabase.table("items").update({"embedding": embedding}).eq("id", item.id).execute()
                    success_count += 1
                    logger.info(f"‚úÖ Embedding g√©n√©r√© pour: {item.name}")
                else:
                    errors.append(f"√âchec g√©n√©ration pour: {item.name}")
                    
            except Exception as e:
                errors.append(f"Erreur pour {item.name}: {str(e)}")
                logger.error(f"Erreur g√©n√©ration embedding: {e}")
        
        # Invalider le cache
        smart_cache.invalidate('items')
        
        return jsonify({
            "message": f"G√©n√©ration d'embeddings termin√©e",
            "total_processed": len(items_without_embedding),
            "success": success_count,
            "errors": len(errors),
            "error_details": errors[:10]  # Limiter les d√©tails d'erreur
        })
        
    except Exception as e:
        logger.error(f"Erreur g√©n√©ration embeddings: {e}")
        return jsonify({"error": str(e)}), 500

@app.route("/api/test-email", methods=["POST"])
def test_email():
    """Route pour tester les notifications Gmail"""
    try:
        data = request.get_json() or {}
        test_type = data.get('type', 'general')
        
        if test_type == 'sale_status':
            # Test changement de statut
            gmail_manager.notify_sale_status_change(
                {
                    'name': 'Test Lamborghini Aventador',
                    'category': 'Voitures',
                    'asking_price': 500000,
                    'construction_year': 2023,
                    'for_sale': True,
                    'sale_progress': 'N√©gociation avanc√©e avec 2 acheteurs s√©rieux. Visites programm√©es cette semaine.'
                },
                'inquiries',
                'negotiation'
            )
            message = "Email de test envoy√©: changement de statut de vente"
            
        elif test_type == 'new_offer':
            # Test nouvelle offre
            gmail_manager.notify_new_offer(
                {
                    'name': 'Test Ferrari 488 GTB',
                    'category': 'Voitures',
                    'asking_price': 300000,
                    'construction_year': 2022,
                    'for_sale': True,
                    'description': 'Ferrari 488 GTB en parfait √©tat, entretien complet, historique certifi√©.'
                },
                270000
            )
            message = "Email de test envoy√©: nouvelle offre"
            
        else:
            # Test g√©n√©ral
            gmail_manager.notify_item_created({
                'name': 'Test Patek Philippe Nautilus',
                'category': 'Montres',
                'for_sale': False,
                'asking_price': 180000,
                'construction_year': 2022,
                'status': 'Available'
            })
            message = "Email de test envoy√©: nouvel objet"
        
        return jsonify({
            "success": True,
            "message": message,
            "email_enabled": gmail_manager.enabled,
            "recipients": gmail_manager.recipients
        })
        
    except Exception as e:
        logger.error(f"Erreur test email: {e}")
        return jsonify({
            "success": False,
            "error": str(e)
        }), 500

@app.route("/api/email-config")
def email_config():
    """Retourne la configuration Gmail"""
    return jsonify({
        "enabled": gmail_manager.enabled,
        "recipients": gmail_manager.recipients,
        "recipients_count": len(gmail_manager.recipients),
        "host": gmail_manager.email_host,
        "port": gmail_manager.email_port,
        "user_configured": bool(gmail_manager.email_user),
        "service": "Gmail",
        "app_url": APP_URL
    })

@app.route("/api/endpoints")
def list_endpoints():
    """Liste tous les endpoints disponibles"""
    endpoints = []
    for rule in app.url_map.iter_rules():
        endpoints.append({
            "endpoint": rule.rule,
            "methods": list(rule.methods - {'HEAD', 'OPTIONS'})
        })
    
    return jsonify({
        "available_endpoints": sorted(endpoints, key=lambda x: x['endpoint']),
        "total_count": len(endpoints),
        "chatbot_endpoint": "/api/chatbot",
        "ai_mode": "openai_gpt4_with_semantic_rag",
        "app_url": APP_URL,
        "new_features": [
            "Recherche s√©mantique RAG",
            "G√©n√©ration automatique d'embeddings",
            "Recherche intelligente par similarit√©",
            "D√©tection d'intention de requ√™te",
            "Support complet des actions boursi√®res",
            "Mise √† jour automatique des prix avec gestion 429",
            "Prix manuel pour les actions",
            "G√©n√©ration PDF pixel perfect"
        ]
    })

@app.route("/api/portfolio/pdf", methods=["GET"])
def generate_portfolio_pdf():
    """G√©n√®re un PDF pixel perfect du portefeuille complet"""
    try:
        # R√©cup√©rer tous les items
        items = AdvancedDataManager.fetch_all_items()
        
        # Calculer les statistiques
        total_items = len(items)
        available_items = len([item for item in items if item.status == 'Available'])
        categories = set([item.category for item in items if item.category])
        categories_count = len(categories)
        
        # Calculer la valeur totale
        total_value = 0
        for item in items:
            if item.status == 'Sold':
                continue
            if item.category == 'Actions' and item.current_price and item.stock_quantity:
                total_value += item.current_price * item.stock_quantity
            elif item.status == 'Available' and item.asking_price:
                total_value += item.asking_price
        
        # Organiser les donn√©es par cat√©gorie
        categories_data = {}
        actions = []
        
        for item in items:
            if item.category == 'Actions':
                actions.append(item)
            else:
                if item.category not in categories_data:
                    categories_data[item.category] = []
                categories_data[item.category].append(item)
        
        # Fonction pour formater les prix
        def format_price(price):
            if not price or price == 0:
                return '0 CHF'
            try:
                return f"{price:,.0f} CHF"
            except:
                return '0 CHF'
        
        # Pr√©parer les donn√©es pour le template
        template_data = {
            'generation_date': datetime.now().strftime('%d/%m/%Y √† %H:%M'),
            'total_items': total_items,
            'total_value': format_price(total_value),
            'available_items': available_items,
            'categories_count': categories_count,
            'actions': actions,
            'categories': categories_data
        }
        
        # Rendre le template HTML
        html_content = render_template('portfolio_pdf.html', **template_data)
        
        # G√©n√©rer le PDF avec WeasyPrint
        try:
            from weasyprint import HTML
            from weasyprint.text.fonts import FontConfiguration
            
            # Configuration des polices
            font_config = FontConfiguration()
            
            # Cr√©er le PDF
            pdf = HTML(string=html_content).write_pdf(
                font_config=font_config
            )
            
            # Retourner le PDF
            from flask import Response
            response = Response(pdf, mimetype='application/pdf')
            response.headers['Content-Disposition'] = f'attachment; filename=bonvin_portfolio_{datetime.now().strftime("%Y%m%d_%H%M")}.pdf'
            
            logger.info(f"‚úÖ PDF g√©n√©r√© avec succ√®s: {total_items} items, {categories_count} cat√©gories")
            return response
            
        except ImportError:
            logger.error("‚ùå WeasyPrint non install√©")
            return jsonify({
                "error": "WeasyPrint non install√©. Installez avec: pip install weasyprint"
            }), 500
            
    except Exception as e:
        logger.error(f"‚ùå Erreur g√©n√©ration PDF: {e}")
        return jsonify({
            "error": str(e)
        }), 500

# Fonctions utilitaires
def clean_update_data(data: Dict[str, Any]) -> Dict[str, Any]:
    """Nettoie les donn√©es de mise √† jour - CORRIG√â POUR INCLURE LES ACTIONS"""
    cleaned = {}
    
    # Champs texte (INCLUT LES CHAMPS ACTIONS)
    text_fields = [
        'name', 'category', 'description', 'sale_progress', 
        'buyer_contact', 'intermediary', 'status', 'condition', 
        'sale_status', 'stock_symbol', 'stock_exchange'
    ]
    for field in text_fields:
        if field in data:
            cleaned[field] = data[field].strip() if data[field] else None
    
    # Champs num√©riques (INCLUT stock_purchase_price et current_price)
    numeric_fields = [
        'asking_price', 'sold_price', 'acquisition_price', 
        'current_offer', 'commission_rate', 'surface_m2', 
        'rental_income_chf', 'stock_purchase_price', 'current_price',
        'stock_pe_ratio', 'stock_52_week_high', 'stock_52_week_low',
        'stock_change', 'stock_change_percent'
    ]
    for field in numeric_fields:
        if field in data:
            try:
                cleaned[field] = float(data[field]) if data[field] else None
            except:
                cleaned[field] = None
    
    # Champs entiers
    if 'construction_year' in data:
        try:
            cleaned['construction_year'] = int(data['construction_year']) if data['construction_year'] else None
        except:
            cleaned['construction_year'] = None
    
    if 'stock_quantity' in data:
        try:
            cleaned['stock_quantity'] = int(data['stock_quantity']) if data['stock_quantity'] else None
        except:
            cleaned['stock_quantity'] = None
    
    # Champs entiers pour les m√©triques boursi√®res
    volume_fields = ['stock_volume', 'stock_average_volume']
    for field in volume_fields:
        if field in data:
            try:
                cleaned[field] = int(data[field]) if data[field] else None
            except:
                cleaned[field] = None
    
    # Bool√©en
    if 'for_sale' in data:
        cleaned['for_sale'] = bool(data['for_sale'])
    
    if 'last_action_date' in data:
        cleaned['last_action_date'] = data['last_action_date']
    
    # Logique m√©tier : nettoyer les champs actions si pas une action
    # MAIS pr√©server le current_price si il existe d√©j√†
    if cleaned.get('category') != 'Actions':
        cleaned['stock_symbol'] = None
        cleaned['stock_quantity'] = None
        cleaned['stock_purchase_price'] = None
        cleaned['stock_exchange'] = None
        # NE PAS effacer current_price ici - il peut √™tre mis √† jour manuellement
    
    # Logique m√©tier existante pour les ventes
    if cleaned.get('for_sale') == False:
        cleaned['sale_status'] = 'initial'
        cleaned['sale_progress'] = None
        cleaned['buyer_contact'] = None
        cleaned['intermediary'] = None
        cleaned['current_offer'] = None
        cleaned['commission_rate'] = None
        cleaned['last_action_date'] = None
    
    return cleaned

# Gestion d'erreurs
@app.errorhandler(404)
def not_found(error):
    return jsonify({"error": "Page non trouv√©e"}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({"error": "Erreur interne du serveur"}), 500

# Point d'entr√©e
if __name__ == "__main__":
    port = int(os.getenv("PORT", 5000))
    host = "0.0.0.0"
    
    logger.info("=" * 60)
    logger.info("üöÄ BONVIN COLLECTION - VERSION OPENAI AVEC RAG")
    logger.info("=" * 60)
    logger.info(f"üåê Host: {host}:{port}")
    logger.info(f"üîó App URL: {APP_URL}")
    logger.info(f"üóÑÔ∏è Supabase: {'‚úÖ' if supabase else '‚ùå'}")
    logger.info(f"ü§ñ OpenAI: {'‚úÖ' if openai_client else '‚ùå'}")
    logger.info(f"üß† IA Engine: {'‚úÖ GPT-4 avec RAG' if ai_engine else '‚ùå'}")
    logger.info(f"üìß Gmail: {'‚úÖ' if gmail_manager.enabled else '‚ùå'}")
    if gmail_manager.enabled:
        logger.info(f"üì¨ Destinataires: {len(gmail_manager.recipients)}")
    logger.info(f"üíæ Cache: ‚úÖ Multi-niveaux avec embeddings")
    logger.info(f"üìà Support Actions: ‚úÖ Complet avec prix temps r√©el")
    logger.info("=" * 60)
    logger.info("MODE: OpenAI Pure avec Recherche S√©mantique RAG")
    logger.info("‚úÖ GPT-4 avec recherche intelligente")
    logger.info("‚úÖ Embeddings OpenAI text-embedding-3-small")
    logger.info("‚úÖ Recherche s√©mantique par similarit√© cosinus")
    logger.info("‚úÖ D√©tection d'intention de requ√™te")
    logger.info("‚úÖ G√©n√©ration automatique d'embeddings")
    logger.info("‚úÖ Cache intelligent pour les embeddings")
    logger.info("‚úÖ Support complet des actions boursi√®res")
    logger.info("‚úÖ Gestion des erreurs 429 avec cache")
    logger.info("‚úÖ Prix manuel pour les actions")
    logger.info("=" * 60)
    
    try:
        app.run(debug=False, host=host, port=port)
    except Exception as e:
        logger.error(f"‚ùå Erreur d√©marrage: {e}")
        raise
