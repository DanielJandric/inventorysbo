#!/usr/bin/env python3
"""
Test de transmission des donn√©es Manus √† ChatGPT
V√©rification de la qualit√© et de la quantit√© des donn√©es transmises
"""

import json
import requests
from datetime import datetime

# Configuration
MANUS_API_BASE_URL = "https://e5h6i7cn86z0.manus.space"

def test_manus_data_transmission():
    """Test de la transmission des donn√©es Manus"""
    
    current_date = datetime.now().strftime('%Y-%m-%d')
    
    print("üîç Test de transmission des donn√©es Manus √† ChatGPT...")
    
    try:
        # 1. Collecter les donn√©es via API Manus
        print("1. Collecte des donn√©es Manus...")
        collect_response = requests.post(f"{MANUS_API_BASE_URL}/api/data/collect", timeout=30)
        if collect_response.status_code != 200:
            print(f"‚ùå Erreur collecte donn√©es Manus: {collect_response.status_code}")
            return
        print("‚úÖ Donn√©es collect√©es")
        
        # 2. R√©cup√©rer les donn√©es d√©taill√©es
        print("2. R√©cup√©ration des donn√©es d√©taill√©es...")
        financial_response = requests.get(f"{MANUS_API_BASE_URL}/api/data/financial", timeout=30)
        financial_data = financial_response.json() if financial_response.status_code == 200 else {}
        
        economic_response = requests.get(f"{MANUS_API_BASE_URL}/api/data/economic", timeout=30)
        economic_data = economic_response.json() if economic_response.status_code == 200 else {}
        
        news_response = requests.get(f"{MANUS_API_BASE_URL}/api/data/news", timeout=30)
        news_data = news_response.json() if news_response.status_code == 200 else {}
        
        print("‚úÖ Donn√©es d√©taill√©es r√©cup√©r√©es")
        
        # 3. Analyser les donn√©es brutes
        print("\n" + "="*80)
        print("üìä ANALYSE DES DONN√âES BRUTES MANUS")
        print("="*80)
        
        # March√©s financiers
        markets = financial_data.get('financial_data', {}).get('markets', {})
        print(f"üìà March√©s financiers: {len(markets)} indices")
        if markets:
            print("   Exemples d'indices:")
            for i, (key, value) in enumerate(list(markets.items())[:5]):
                print(f"   - {key}: {value}")
        
        # Obligations
        bonds = financial_data.get('financial_data', {}).get('bonds', [])
        print(f"üìä Obligations: {len(bonds)} obligations")
        if bonds:
            print("   Exemples d'obligations:")
            for i, bond in enumerate(bonds[:3]):
                print(f"   - {bond}")
        
        # Cryptomonnaies
        cryptos = financial_data.get('crypto_data', {}).get('cryptocurrencies', [])
        print(f"ü™ô Cryptomonnaies: {len(cryptos)} cryptos")
        if cryptos:
            print("   Exemples de cryptos:")
            for i, crypto in enumerate(cryptos[:3]):
                print(f"   - {crypto}")
        
        # Commodit√©s
        commodities = financial_data.get('financial_data', {}).get('commodities', [])
        print(f"üõ¢Ô∏è Commodit√©s: {len(commodities)} commodit√©s")
        if commodities:
            print("   Exemples de commodit√©s:")
            for i, commodity in enumerate(commodities[:3]):
                print(f"   - {commodity}")
        
        # Devises
        currencies = financial_data.get('financial_data', {}).get('currencies', [])
        print(f"üí± Devises: {len(currencies)} paires")
        if currencies:
            print("   Exemples de devises:")
            for i, currency in enumerate(currencies[:3]):
                print(f"   - {currency}")
        
        # Indicateurs √©conomiques
        indicators = economic_data.get('economic_data', {}).get('indicators', {})
        print(f"üìä Indicateurs √©conomiques: {len(indicators)} indicateurs")
        if indicators:
            print("   Exemples d'indicateurs:")
            for i, (key, value) in enumerate(list(indicators.items())[:3]):
                print(f"   - {key}: {value}")
        
        # Actualit√©s
        news = news_data.get('news_data', {})
        print(f"üì∞ Actualit√©s: {len(news)} articles")
        if news:
            print("   Exemples d'actualit√©s:")
            for i, (key, value) in enumerate(list(news.items())[:3]):
                print(f"   - {key}: {value}")
        
        # 4. Analyser les limitations actuelles
        print("\n" + "="*80)
        print("‚ö†Ô∏è LIMITATIONS ACTUELLES DANS LE CODE")
        print("="*80)
        
        # Calculer les tailles des donn√©es
        markets_json = json.dumps(markets, indent=2, ensure_ascii=False)
        bonds_json = json.dumps(bonds, indent=2, ensure_ascii=False)
        cryptos_json = json.dumps(cryptos, indent=2, ensure_ascii=False)
        commodities_json = json.dumps(commodities, indent=2, ensure_ascii=False)
        currencies_json = json.dumps(currencies, indent=2, ensure_ascii=False)
        indicators_json = json.dumps(indicators, indent=2, ensure_ascii=False)
        news_json = json.dumps(news, indent=2, ensure_ascii=False)
        
        print(f"üìà March√©s financiers:")
        print(f"   - Donn√©es compl√®tes: {len(markets_json)} caract√®res")
        print(f"   - Limitation actuelle: 1000 caract√®res")
        print(f"   - Donn√©es perdues: {max(0, len(markets_json) - 1000)} caract√®res")
        
        print(f"üìä Obligations:")
        print(f"   - Donn√©es compl√®tes: {len(bonds_json)} caract√®res")
        print(f"   - Limitation actuelle: 500 caract√®res")
        print(f"   - Donn√©es perdues: {max(0, len(bonds_json) - 500)} caract√®res")
        
        print(f"ü™ô Cryptomonnaies:")
        print(f"   - Donn√©es compl√®tes: {len(cryptos_json)} caract√®res")
        print(f"   - Limitation actuelle: 500 caract√®res")
        print(f"   - Donn√©es perdues: {max(0, len(cryptos_json) - 500)} caract√®res")
        
        print(f"üõ¢Ô∏è Commodit√©s:")
        print(f"   - Donn√©es compl√®tes: {len(commodities_json)} caract√®res")
        print(f"   - Limitation actuelle: 500 caract√®res")
        print(f"   - Donn√©es perdues: {max(0, len(commodities_json) - 500)} caract√®res")
        
        print(f"üí± Devises:")
        print(f"   - Donn√©es compl√®tes: {len(currencies_json)} caract√®res")
        print(f"   - Limitation actuelle: 500 caract√®res")
        print(f"   - Donn√©es perdues: {max(0, len(currencies_json) - 500)} caract√®res")
        
        print(f"üìä Indicateurs √©conomiques:")
        print(f"   - Donn√©es compl√®tes: {len(indicators_json)} caract√®res")
        print(f"   - Limitation actuelle: 1000 caract√®res")
        print(f"   - Donn√©es perdues: {max(0, len(indicators_json) - 1000)} caract√®res")
        
        print(f"üì∞ Actualit√©s:")
        print(f"   - Donn√©es compl√®tes: {len(news_json)} caract√®res")
        print(f"   - Limitation actuelle: 1000 caract√®res")
        print(f"   - Donn√©es perdues: {max(0, len(news_json) - 1000)} caract√®res")
        
        # 5. Construire le contexte actuel (avec limitations)
        context_limited = f"""Donn√©es de march√© actuelles (API Manus) pour {current_date}:

MARCH√âS FINANCIERS:
{markets_json[:1000]}

OBLIGATIONS:
{bonds_json[:500]}

CRYPTOMONNAIES:
{cryptos_json[:500]}

COMMODIT√âS:
{commodities_json[:500]}

DEVISES:
{currencies_json[:500]}

INDICATEURS √âCONOMIQUES:
{indicators_json[:1000]}

ACTUALIT√âS:
{news_json[:1000]}"""

        # 6. Construire le contexte complet (sans limitations)
        context_complete = f"""Donn√©es de march√© actuelles (API Manus) pour {current_date}:

MARCH√âS FINANCIERS:
{markets_json}

OBLIGATIONS:
{bonds_json}

CRYPTOMONNAIES:
{cryptos_json}

COMMODIT√âS:
{commodities_json}

DEVISES:
{currencies_json}

INDICATEURS √âCONOMIQUES:
{indicators_json}

ACTUALIT√âS:
{news_json}"""

        # 7. Comparer les tailles
        print("\n" + "="*80)
        print("üìè COMPARAISON DES TAILLES DE CONTEXTE")
        print("="*80)
        
        print(f"Contexte avec limitations: {len(context_limited)} caract√®res")
        print(f"Contexte complet: {len(context_complete)} caract√®res")
        print(f"Donn√©es perdues: {len(context_complete) - len(context_limited)} caract√®res")
        print(f"Pourcentage perdu: {((len(context_complete) - len(context_limited)) / len(context_complete) * 100):.1f}%")
        
        # 8. V√©rifier les limites de tokens OpenAI
        print("\n" + "="*80)
        print("ü§ñ LIMITES OPENAI GPT-4o")
        print("="*80)
        
        # Estimation: 1 token ‚âà 4 caract√®res
        tokens_limited = len(context_limited) // 4
        tokens_complete = len(context_complete) // 4
        
        print(f"Tokens estim√©s (contexte limit√©): {tokens_limited}")
        print(f"Tokens estim√©s (contexte complet): {tokens_complete}")
        print(f"Limite GPT-4o: 128,000 tokens")
        print(f"Marge disponible: {128000 - tokens_complete}")
        
        # 9. Recommandations
        print("\n" + "="*80)
        print("üí° RECOMMANDATIONS")
        print("="*80)
        
        if tokens_complete < 100000:  # Marge de s√©curit√©
            print("‚úÖ SUPPRIMER LES LIMITATIONS")
            print("   - Les donn√©es compl√®tes peuvent √™tre transmises")
            print("   - Plus d'informations pour ChatGPT")
            print("   - Analyse plus compl√®te et pr√©cise")
        else:
            print("‚ö†Ô∏è OPTIMISER LES DONN√âES")
            print("   - Filtrer les donn√©es les plus importantes")
            print("   - Structurer les donn√©es de mani√®re plus concise")
            print("   - Prioriser les informations cl√©s")
        
        # 10. Sauvegarder les r√©sultats
        with open(f"test_transmission_manus_{current_date}.txt", "w", encoding="utf-8") as f:
            f.write("=== TEST TRANSMISSION DONN√âES MANUS ===\n\n")
            f.write(f"Date: {current_date}\n\n")
            f.write("=== DONN√âES BRUTES ===\n")
            f.write(f"March√©s: {len(markets)} indices\n")
            f.write(f"Obligations: {len(bonds)} obligations\n")
            f.write(f"Cryptos: {len(cryptos)} cryptos\n")
            f.write(f"Commodit√©s: {len(commodities)} commodit√©s\n")
            f.write(f"Devises: {len(currencies)} paires\n")
            f.write(f"Indicateurs: {len(indicators)} indicateurs\n")
            f.write(f"Actualit√©s: {len(news)} articles\n\n")
            f.write("=== LIMITATIONS ===\n")
            f.write(f"Contexte limit√©: {len(context_limited)} caract√®res\n")
            f.write(f"Contexte complet: {len(context_complete)} caract√®res\n")
            f.write(f"Donn√©es perdues: {len(context_complete) - len(context_limited)} caract√®res\n")
            f.write(f"Tokens estim√©s (complet): {tokens_complete}\n")
        
        print(f"\nüíæ R√©sultats sauvegard√©s dans test_transmission_manus_{current_date}.txt")
        print("\n‚úÖ Test termin√© !")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    test_manus_data_transmission() 