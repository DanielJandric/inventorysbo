#!/usr/bin/env python3
"""
Exemple d'int√©gration des APIs Manus dans l'application Flask existante
Ajoute des routes pour les rapports de march√© et les cours de bourse
"""

from flask import Flask, jsonify, render_template, request
from manus_api_integration import ManusIntegrationManager, integrate_market_report_to_app, integrate_stock_prices_to_app
import json
from datetime import datetime

# Initialiser le gestionnaire d'int√©gration
manus_manager = ManusIntegrationManager()

def create_manus_routes(app):
    """Ajoute les routes Manus √† l'application Flask"""
    
    @app.route('/api/manus/market-report')
    def get_manus_market_report():
        """Route pour r√©cup√©rer le rapport des march√©s Manus"""
        try:
            force_refresh = request.args.get('refresh', 'false').lower() == 'true'
            market_update = manus_manager.get_market_update(force_refresh)
            
            if market_update:
                return jsonify({
                    'success': True,
                    'data': market_update,
                    'timestamp': datetime.now().isoformat()
                })
            else:
                return jsonify({
                    'success': False,
                    'error': 'Impossible de r√©cup√©rer le rapport des march√©s',
                    'timestamp': datetime.now().isoformat()
                }), 500
                
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }), 500
    
    @app.route('/api/manus/stock-prices')
    def get_manus_stock_prices():
        """Route pour r√©cup√©rer les prix des actions Manus"""
        try:
            symbols = request.args.get('symbols', '')
            if not symbols:
                return jsonify({
                    'success': False,
                    'error': 'Param√®tre symbols requis',
                    'timestamp': datetime.now().isoformat()
                }), 400
            
            # Convertir la liste des symboles
            symbol_list = [s.strip().upper() for s in symbols.split(',') if s.strip()]
            if not symbol_list:
                return jsonify({
                    'success': False,
                    'error': 'Aucun symbole valide fourni',
                    'timestamp': datetime.now().isoformat()
                }), 400
            
            stock_prices = manus_manager.get_stock_prices(symbol_list)
            
            return jsonify({
                'success': True,
                'data': stock_prices,
                'symbols_requested': symbol_list,
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }), 500
    
    @app.route('/api/manus/complete-data')
    def get_manus_complete_data():
        """Route pour r√©cup√©rer toutes les donn√©es Manus"""
        try:
            symbols = request.args.get('symbols', '')
            symbol_list = []
            
            if symbols:
                symbol_list = [s.strip().upper() for s in symbols.split(',') if s.strip()]
            
            complete_data = manus_manager.get_complete_market_data(symbol_list)
            
            return jsonify({
                'success': True,
                'data': complete_data,
                'timestamp': datetime.now().isoformat()
            })
            
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }), 500
    
    @app.route('/api/manus/status')
    def get_manus_api_status():
        """Route pour v√©rifier le statut des APIs Manus"""
        try:
            # V√©rifier le statut de l'API de rapport
            market_api_status = manus_manager.market_report_api.session.get(
                f"{manus_manager.market_report_api.base_url}/api/health",
                timeout=5
            ).status_code == 200
            
            # V√©rifier le statut de l'API de cours
            stock_api_status = manus_manager.stock_api.get_api_status()
            
            return jsonify({
                'success': True,
                'data': {
                    'market_report_api': {
                        'status': 'online' if market_api_status else 'offline',
                        'url': manus_manager.market_report_api.base_url
                    },
                    'stock_api': stock_api_status or {
                        'status': 'offline',
                        'url': manus_manager.stock_api.base_url
                    },
                    'timestamp': datetime.now().isoformat()
                }
            })
            
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }), 500
    
    @app.route('/manus/markets')
    def manus_markets_page():
        """Page pour afficher les rapports de march√© Manus"""
        try:
            market_update = manus_manager.get_market_update()
            
            if market_update:
                return render_template('manus_markets.html', 
                                     market_data=market_update,
                                     timestamp=datetime.now().isoformat())
            else:
                return render_template('manus_markets.html', 
                                     market_data=None,
                                     error="Impossible de r√©cup√©rer les donn√©es",
                                     timestamp=datetime.now().isoformat())
                
        except Exception as e:
            return render_template('manus_markets.html', 
                                 market_data=None,
                                 error=str(e),
                                 timestamp=datetime.now().isoformat())
    
    @app.route('/manus/stocks')
    def manus_stocks_page():
        """Page pour afficher les cours de bourse Manus"""
        try:
            # R√©cup√©rer les symboles depuis les param√®tres ou utiliser des valeurs par d√©faut
            default_symbols = ['AAPL', 'MSFT', 'GOOGL', 'TSLA', 'AMZN']
            symbols = request.args.get('symbols', ','.join(default_symbols))
            symbol_list = [s.strip().upper() for s in symbols.split(',') if s.strip()]
            
            stock_prices = manus_manager.get_stock_prices(symbol_list)
            
            return render_template('manus_stocks.html', 
                                 stock_data=stock_prices,
                                 symbols=symbol_list,
                                 timestamp=datetime.now().isoformat())
                
        except Exception as e:
            return render_template('manus_stocks.html', 
                                 stock_data={},
                                 symbols=[],
                                 error=str(e),
                                 timestamp=datetime.now().isoformat())

# Exemple d'utilisation dans votre app.py existant
def integrate_manus_into_existing_app(app):
    """
    Fonction pour int√©grer les routes Manus dans votre application existante
    
    Usage dans votre app.py:
    from manus_flask_integration import integrate_manus_into_existing_app
    
    app = Flask(__name__)
    integrate_manus_into_existing_app(app)
    """
    
    # Ajouter les routes Manus
    create_manus_routes(app)
    
    # Ajouter un menu dans la navigation (si vous en avez un)
    @app.context_processor
    def inject_manus_menu():
        """Injecte le menu Manus dans le contexte des templates"""
        return {
            'manus_menu': [
                {'url': '/manus/markets', 'title': 'Rapports March√©s Manus'},
                {'url': '/manus/stocks', 'title': 'Cours Bourse Manus'},
                {'url': '/api/manus/status', 'title': 'Statut APIs Manus'}
            ]
        }

# Exemple de template pour les rapports de march√©
MANUS_MARKETS_TEMPLATE = """
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapports de March√© - Manus API</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }
        .content { margin: 20px 0; }
        .metric { display: inline-block; margin: 10px; padding: 10px; background: #e8f4f8; border-radius: 5px; }
        .section { margin: 20px 0; padding: 15px; border-left: 4px solid #007bff; }
        .error { color: red; background: #ffe6e6; padding: 10px; border-radius: 5px; }
        .timestamp { color: #666; font-size: 0.9em; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üìä Rapports de March√© - Manus API</h1>
        <p class="timestamp">Derni√®re mise √† jour: {{ timestamp }}</p>
    </div>
    
    {% if error %}
        <div class="error">
            <h3>‚ùå Erreur</h3>
            <p>{{ error }}</p>
        </div>
    {% elif market_data %}
        <div class="content">
            <h2>üìà M√©triques Cl√©s</h2>
            <div class="metrics">
                {% for key, value in market_data.key_metrics.items() %}
                    <div class="metric">
                        <strong>{{ key|title }}:</strong> {{ value }}%
                    </div>
                {% endfor %}
            </div>
            
            <h2>üìã R√©sum√©</h2>
            <div class="section">
                {% if market_data.summary.key_points %}
                    <ul>
                    {% for point in market_data.summary.key_points %}
                        <li>{{ point }}</li>
                    {% endfor %}
                    </ul>
                {% endif %}
            </div>
            
            <h2>üìù Contenu Complet</h2>
            <div class="section">
                {% if market_data.content_markdown %}
                    <pre>{{ market_data.content_markdown }}</pre>
                {% endif %}
            </div>
            
            <h2>üîß Informations Techniques</h2>
            <div class="section">
                <p><strong>Date du rapport:</strong> {{ market_data.report_date }}</p>
                <p><strong>Sections disponibles:</strong> {{ market_data.sections|length }}</p>
                <p><strong>Statut:</strong> {{ market_data.summary.status }}</p>
            </div>
        </div>
    {% else %}
        <div class="error">
            <h3>‚ö†Ô∏è Aucune donn√©e disponible</h3>
            <p>Impossible de r√©cup√©rer les donn√©es de march√©.</p>
        </div>
    {% endif %}
    
    <div class="header">
        <p><a href="/api/manus/market-report">API JSON</a> | 
           <a href="/manus/stocks">Cours de Bourse</a> | 
           <a href="/api/manus/status">Statut APIs</a></p>
    </div>
</body>
</html>
"""

# Exemple de template pour les cours de bourse
MANUS_STOCKS_TEMPLATE = """
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cours de Bourse - Manus API</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .header { background: #f0f0f0; padding: 20px; border-radius: 5px; }
        .stock-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin: 20px 0; }
        .stock-card { border: 1px solid #ddd; padding: 15px; border-radius: 5px; }
        .stock-card.available { background: #e8f5e8; }
        .stock-card.unavailable { background: #ffe6e6; }
        .error { color: red; background: #ffe6e6; padding: 10px; border-radius: 5px; }
        .timestamp { color: #666; font-size: 0.9em; }
        .form { margin: 20px 0; }
        .form input { padding: 10px; margin-right: 10px; }
        .form button { padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üíπ Cours de Bourse - Manus API</h1>
        <p class="timestamp">Derni√®re mise √† jour: {{ timestamp }}</p>
    </div>
    
    <div class="form">
        <form method="GET">
            <input type="text" name="symbols" value="{{ symbols|join(',') }}" placeholder="AAPL,MSFT,GOOGL">
            <button type="submit">Actualiser</button>
        </form>
    </div>
    
    {% if error %}
        <div class="error">
            <h3>‚ùå Erreur</h3>
            <p>{{ error }}</p>
        </div>
    {% elif stock_data %}
        <div class="stock-grid">
            {% for symbol, data in stock_data.items() %}
                <div class="stock-card {% if data.available %}available{% else %}unavailable{% endif %}">
                    <h3>{{ symbol }}</h3>
                    {% if data.available %}
                        <p><strong>Format:</strong> {{ data.format }}</p>
                        {% if data.format == 'html' %}
                            <p><strong>URL:</strong> <a href="{{ data.url }}" target="_blank">Voir donn√©es</a></p>
                            <p><strong>Taille:</strong> {{ data.content_length }} caract√®res</p>
                        {% elif data.format == 'json' %}
                            <p><strong>Donn√©es JSON disponibles</strong></p>
                        {% endif %}
                    {% else %}
                        <p><strong>Statut:</strong> Non disponible</p>
                        {% if data.error %}
                            <p><strong>Erreur:</strong> {{ data.error }}</p>
                        {% endif %}
                    {% endif %}
                </div>
            {% endfor %}
        </div>
        
        <div class="header">
            <h3>üìä R√©sum√©</h3>
            <p>Actions disponibles: {{ stock_data.values()|selectattr('available')|list|length }}/{{ stock_data|length }}</p>
        </div>
    {% else %}
        <div class="error">
            <h3>‚ö†Ô∏è Aucune donn√©e disponible</h3>
            <p>Aucune donn√©e de cours de bourse n'est disponible.</p>
        </div>
    {% endif %}
    
    <div class="header">
        <p><a href="/api/manus/stock-prices?symbols={{ symbols|join(',') }}">API JSON</a> | 
           <a href="/manus/markets">Rapports March√©s</a> | 
           <a href="/api/manus/status">Statut APIs</a></p>
    </div>
</body>
</html>
"""

# Exemple d'utilisation
if __name__ == "__main__":
    print("üß™ Test d'int√©gration Flask Manus")
    print("=" * 50)
    
    # Cr√©er une application Flask de test
    app = Flask(__name__)
    
    # Int√©grer les routes Manus
    integrate_manus_into_existing_app(app)
    
    # Cr√©er les templates
    import os
    if not os.path.exists('templates'):
        os.makedirs('templates')
    
    with open('templates/manus_markets.html', 'w', encoding='utf-8') as f:
        f.write(MANUS_MARKETS_TEMPLATE)
    
    with open('templates/manus_stocks.html', 'w', encoding='utf-8') as f:
        f.write(MANUS_STOCKS_TEMPLATE)
    
    print("‚úÖ Templates cr√©√©s")
    print("‚úÖ Routes Manus int√©gr√©es")
    print("\nüìã Routes disponibles:")
    print("   ‚Ä¢ GET /api/manus/market-report - Rapport des march√©s (JSON)")
    print("   ‚Ä¢ GET /api/manus/stock-prices?symbols=AAPL,MSFT - Prix actions (JSON)")
    print("   ‚Ä¢ GET /api/manus/complete-data - Donn√©es compl√®tes (JSON)")
    print("   ‚Ä¢ GET /api/manus/status - Statut des APIs (JSON)")
    print("   ‚Ä¢ GET /manus/markets - Page rapports march√©s (HTML)")
    print("   ‚Ä¢ GET /manus/stocks - Page cours bourse (HTML)")
    
    print("\nüéâ Int√©gration termin√©e !")
    print("üí° Pour utiliser dans votre app.py existant:")
    print("   from manus_flask_integration import integrate_manus_into_existing_app")
    print("   integrate_manus_into_existing_app(app)") 