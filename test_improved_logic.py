#!/usr/bin/env python3
"""
Test d'une logique de fallback plus sophistiqu√©e
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_current_logic():
    """Test de la logique actuelle"""
    print("üîç Test de la logique actuelle...")
    
    try:
        from manus_integration import manus_stock_api
        
        symbols = ["AAPL", "TSLA", "IREN.SW"]
        
        for symbol in symbols:
            print(f"\nüìà Test {symbol}:")
            
            # Vider le cache
            manus_stock_api.clear_cache()
            
            # Test avec force_refresh
            result = manus_stock_api.get_stock_price(symbol, force_refresh=True)
            
            print(f"   üí∞ Prix final: {result.get('price')} {result.get('currency')}")
            print(f"   üìã Source: {result.get('source')}")
            print(f"   üîç Parsing success: {result.get('parsing_success')}")
            
            if result.get('price') == 1.0:
                print(f"   ‚ö†Ô∏è Prix toujours √† 1.0!")
            else:
                print(f"   ‚úÖ Prix correct obtenu")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def suggest_improved_logic():
    """Sugg√®re une logique am√©lior√©e"""
    print("\nüí° SUGGESTIONS D'AM√âLIORATION:")
    
    suggestions = [
        "1. V√©rifier si le prix est dans une plage r√©aliste (0.01 - 10000)",
        "2. Comparer avec le prix pr√©c√©dent (si disponible)",
        "3. V√©rifier si plusieurs actions ont le m√™me prix (signe de probl√®me)",
        "4. Utiliser des patterns plus sp√©cifiques pour le parsing",
        "5. Ajouter une validation de coh√©rence (prix vs devise vs march√©)",
        "6. Impl√©menter un syst√®me de confiance pour chaque source"
    ]
    
    for suggestion in suggestions:
        print(f"   {suggestion}")

def test_price_validation():
    """Test de validation des prix"""
    print("\nüîç Test de validation des prix...")
    
    def is_realistic_price(price, symbol):
        """V√©rifie si un prix est r√©aliste"""
        if price is None:
            return False
        
        # Plages de prix r√©alistes par type d'action
        price_ranges = {
            # Actions am√©ricaines (g√©n√©ralement 10-1000 USD)
            "AAPL": (50, 500),
            "TSLA": (100, 1000),
            "MSFT": (100, 1000),
            "GOOGL": (50, 500),
            
            # Actions suisses (g√©n√©ralement 50-500 CHF)
            "IREN.SW": (50, 500),
            "NOVN.SW": (50, 500),
            "ROG.SW": (100, 1000),
            
            # Actions europ√©ennes (g√©n√©ralement 50-1000 EUR)
            "ASML": (200, 2000),
            "SAP": (100, 1000),
        }
        
        # Plage par d√©faut si symbole non sp√©cifi√©
        default_range = (0.01, 10000)
        min_price, max_price = price_ranges.get(symbol, default_range)
        
        is_realistic = min_price <= price <= max_price
        print(f"   üìä {symbol}: {price} dans [{min_price}, {max_price}] = {is_realistic}")
        
        return is_realistic
    
    test_cases = [
        ("AAPL", 212.48, True),
        ("AAPL", 1.0, False),
        ("TSLA", 328.49, True),
        ("TSLA", 1.0, False),
        ("IREN.SW", 127.0, True),
        ("IREN.SW", 1.0, False),
    ]
    
    for symbol, price, expected in test_cases:
        result = is_realistic_price(price, symbol)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"   {status} {symbol}: {price} (attendu: {expected}, obtenu: {result})")

def main():
    """Test principal"""
    print("üöÄ Test de la logique de fallback")
    print("=" * 80)
    
    # Test actuel
    test_current_logic()
    
    # Suggestions
    suggest_improved_logic()
    
    # Test validation
    test_price_validation()
    
    print("\n" + "=" * 80)
    print("üìã CONCLUSION:")
    print("‚úÖ La logique actuelle fonctionne (fallback sur 1.0)")
    print("üí° Possibilit√© d'am√©liorer avec validation de prix r√©alistes")
    print("üéØ Le probl√®me principal √©tait le d√©ploiement, pas la logique")

if __name__ == "__main__":
    main() 