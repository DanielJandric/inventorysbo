# render.yaml - Configuration Render pour BONVIN Collection

services:
  - type: web
    name: bonvin-collection
    env: python
    plan: starter  # Changez en 'standard' si besoin de plus de ressources
    buildCommand: "./build.sh"
    startCommand: "./start.sh"
    healthCheckPath: /health
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.4
      - key: FLASK_ENV
        value: production
      - key: SUPABASE_URL
        sync: false  # À définir dans les variables d'environnement Render
      - key: SUPABASE_KEY
        sync: false  # À définir dans les variables d'environnement Render
      - key: OPENAI_API_KEY
        sync: false  # À définir dans les variables d'environnement Render
      - key: REDIS_URL
        fromService:
          type: redis
          name: inventorysbo-redis
          property: connectionString
      - key: LLM_QUEUE
        value: "celery"
      - key: ASYNC_CHAT
        value: "1"
      - key: CHAT_V2
        value: "1"
      - key: ASYNC_MARKETS_CHAT
        value: "1"
      - key: MARKETS_CHAT_V2
        value: "1"
      - key: GUNICORN_THREADS
        value: "8"
      - key: GUNICORN_WORKERS
        value: "2"
      - key: GUNICORN_TIMEOUT
        value: "300"
      - key: TIMEOUT_S
        value: "45"
      - key: STREAM_BUDGET_S
        value: "40"
      - key: STREAM_HEARTBEAT_S
        value: "5"
      - key: REDIS_USE_SSL
        value: "0"
      - key: USE_AGENT
        value: "1"
      - key: AGENT_CHAT_URL
        sync: false

  - type: worker
    name: inventorysbo-llm-worker
    env: python
    plan: starter
    buildCommand: "./build.sh"
    startCommand: "celery -A celery_app.celery worker -Q celery,pdf --loglevel=INFO -n worker-%h"
    envVars:
      - key: REDIS_URL
        fromService:
          type: redis
          name: inventorysbo-redis
          property: connectionString
      - key: ASYNC_CHAT
        value: "1"
      - key: ASYNC_MARKETS_CHAT
        value: "1"
      - key: REDIS_USE_SSL
        value: "0"
      - key: CELERY_BROKER_URL
        sync: false
      - key: CELERY_RESULT_BACKEND
        sync: false

  - type: web
    name: mcp-server
    env: node
    buildCommand: "bash -lc 'export NPM_CONFIG_PRODUCTION=false && npm --prefix apps/mcp-server install --include=dev'"
    startCommand: "node --loader tsx apps/mcp-server/src/index.ts"
    healthCheckPath: /health
    envVars:
      - key: NODE_VERSION
        value: "20"
      - key: SUPABASE_URL
        sync: false
      - key: SUPABASE_SERVICE_ROLE_KEY
        sync: false
      - key: OPENAI_API_KEY
        sync: false
      - key: LOG_LEVEL
        value: "info"

  - type: web
    name: chat-backend
    env: node
    buildCommand: "bash -lc 'export NPM_CONFIG_PRODUCTION=false && npm --prefix apps/chat-backend install --include=dev && npm --prefix apps/chat-backend run build'"
    startCommand: "node apps/chat-backend/dist/index.js"
    healthCheckPath: /health
    envVars:
      - key: NODE_VERSION
        value: "20"
      - key: MCP_URL
        sync: false
      - key: ALLOWED_ORIGIN
        sync: false

  - type: worker
    name: inventorysbo-pdf-worker
    env: python
    plan: starter
    buildCommand: "./build.sh"
    startCommand: "celery -A celery_app.celery worker -Q pdf --loglevel=INFO"
    envVars:
      - key: REDIS_URL
        fromService:
          type: redis
          name: inventorysbo-redis
          property: connectionString
      - key: ASYNC_CHAT
        value: "1"
      - key: ASYNC_MARKETS_CHAT
        value: "1"
      - key: REDIS_USE_SSL
        value: "0"
      - key: CELERY_BROKER_URL
        sync: false
      - key: CELERY_RESULT_BACKEND
        sync: false

  - type: redis
    name: inventorysbo-redis
    plan: free
    ipAllowList:
      - source: 0.0.0.0/0
        description: allow all (temporary)

  - type: cron
    name: precompute-snapshots
    env: python
    schedule: "*/15 * * * *"
    buildCommand: "./build.sh"
    startCommand: "bash -lc 'python - <<PY\nfrom tasks import chat_task\nprint("cron ok")\nPY'"
