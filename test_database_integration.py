#!/usr/bin/env python3
"""
Test d'int√©gration de la base de donn√©es pour le Background Worker
"""

import os
import sys
import logging
from datetime import datetime
from dotenv import load_dotenv

# Charger les variables d'environnement
load_dotenv()

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_database_connection():
    """Test de la connexion √† la base de donn√©es"""
    try:
        from market_analysis_db import get_market_analysis_db
        db = get_market_analysis_db()
        
        if db.is_connected():
            logger.info("‚úÖ Connexion √† la base de donn√©es r√©ussie")
            return True
        else:
            logger.error("‚ùå √âchec de la connexion √† la base de donn√©es")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test de connexion: {e}")
        return False

def test_create_analysis():
    """Test de cr√©ation d'une analyse"""
    try:
        from market_analysis_db import get_market_analysis_db, MarketAnalysis
        db = get_market_analysis_db()
        
        # Cr√©er une analyse de test
        test_analysis = MarketAnalysis(
            analysis_type='test',
            summary='Test d\'int√©gration de la base de donn√©es',
            key_points=[
                'Connexion √† Supabase r√©ussie',
                'Sauvegarde des analyses fonctionnelle',
                'R√©cup√©ration des donn√©es op√©rationnelle'
            ],
            structured_data={
                'prix': 'Test',
                'tendance': 'Positive',
                'volumes': '√âlev√©s'
            },
            insights=['Test r√©ussi'],
            risks=['Aucun risque'],
            opportunities=['Int√©gration compl√®te'],
            sources=[{'title': 'Test Integration', 'url': '#'}],
            confidence_score=0.95,
            worker_status='completed'
        )
        
        # Sauvegarder l'analyse
        analysis_id = db.save_analysis(test_analysis)
        
        if analysis_id:
            logger.info(f"‚úÖ Analyse de test cr√©√©e avec l'ID: {analysis_id}")
            return analysis_id
        else:
            logger.error("‚ùå √âchec de la cr√©ation de l'analyse")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test de cr√©ation: {e}")
        return None

def test_retrieve_analysis(analysis_id=None):
    """Test de r√©cup√©ration d'analyses"""
    try:
        from market_analysis_db import get_market_analysis_db
        db = get_market_analysis_db()
        
        # R√©cup√©rer la derni√®re analyse
        latest = db.get_latest_analysis()
        
        if latest:
            logger.info(f"‚úÖ Derni√®re analyse r√©cup√©r√©e (ID: {latest.id})")
            logger.info(f"   Type: {latest.analysis_type}")
            logger.info(f"   Timestamp: {latest.timestamp}")
            logger.info(f"   R√©sum√©: {latest.summary[:100]}...")
            return True
        else:
            logger.warning("‚ö†Ô∏è Aucune analyse trouv√©e")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test de r√©cup√©ration: {e}")
        return False

def test_worker_status():
    """Test du statut du worker"""
    try:
        from market_analysis_db import get_market_analysis_db
        db = get_market_analysis_db()
        
        status = db.get_worker_status()
        
        logger.info("üìä Statut du Background Worker:")
        logger.info(f"   Disponible: {status.get('available', False)}")
        logger.info(f"   Statut: {status.get('status', 'unknown')}")
        logger.info(f"   Derni√®re v√©rification: {status.get('last_check', 'N/A')}")
        
        if 'last_analysis' in status:
            logger.info(f"   Derni√®re analyse: {status['last_analysis']}")
            logger.info(f"   Heures depuis analyse: {status.get('hours_since_analysis', 'N/A')}")
        
        return status.get('available', False)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test de statut: {e}")
        return False

def test_app_integration():
    """Test de l'int√©gration avec l'application web"""
    try:
        # Importer les fonctions de l'app
        sys.path.append('.')
        from app import check_background_worker_status, get_latest_market_analysis
        
        # Test du statut
        status = check_background_worker_status()
        logger.info("‚úÖ Test d'int√©gration app - Statut:")
        logger.info(f"   {status}")
        
        # Test de r√©cup√©ration d'analyse
        analysis = get_latest_market_analysis()
        if analysis:
            logger.info("‚úÖ Test d'int√©gration app - Analyse r√©cup√©r√©e")
            logger.info(f"   Timestamp: {analysis.get('timestamp')}")
        else:
            logger.info("‚ÑπÔ∏è Test d'int√©gration app - Aucune analyse disponible")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test d'int√©gration app: {e}")
        return False

def main():
    """Fonction principale de test"""
    logger.info("üß™ D√©marrage des tests d'int√©gration de la base de donn√©es")
    logger.info("=" * 60)
    
    # Test 1: Connexion √† la base de donn√©es
    logger.info("üìã Test 1: Connexion √† la base de donn√©es")
    if not test_database_connection():
        logger.error("‚ùå Test de connexion √©chou√© - Arr√™t des tests")
        return False
    
    # Test 2: Cr√©ation d'une analyse
    logger.info("\nüìã Test 2: Cr√©ation d'une analyse")
    analysis_id = test_create_analysis()
    
    # Test 3: R√©cup√©ration d'analyses
    logger.info("\nüìã Test 3: R√©cup√©ration d'analyses")
    test_retrieve_analysis(analysis_id)
    
    # Test 4: Statut du worker
    logger.info("\nüìã Test 4: Statut du Background Worker")
    test_worker_status()
    
    # Test 5: Int√©gration avec l'app
    logger.info("\nüìã Test 5: Int√©gration avec l'application web")
    test_app_integration()
    
    logger.info("\n" + "=" * 60)
    logger.info("‚úÖ Tests d'int√©gration termin√©s")
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 