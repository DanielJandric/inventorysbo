#!/usr/bin/env python3
"""
Script de test pour l'int√©gration Google Search API
Teste toutes les fonctionnalit√©s de l'API Google Search
"""

import requests
import json
import time
from datetime import datetime

# Configuration
BASE_URL = "http://localhost:5000"
API_BASE = f"{BASE_URL}/api/google-search"

def print_section(title):
    """Affiche une section de test"""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")

def print_result(success, message, data=None):
    """Affiche le r√©sultat d'un test"""
    status = "‚úÖ SUCC√àS" if success else "‚ùå √âCHEC"
    print(f"{status}: {message}")
    if data and success:
        print(f"üìä Donn√©es: {json.dumps(data, indent=2, ensure_ascii=False)}")
    print()

def test_api_status():
    """Teste le statut de l'API Google Search"""
    print_section("Test du statut de l'API")
    
    try:
        response = requests.get(f"{API_BASE}/status", timeout=10)
        data = response.json()
        
        if response.status_code == 200:
            print_result(True, "Statut de l'API r√©cup√©r√© avec succ√®s", data)
            return data.get('available', False)
        else:
            print_result(False, f"Erreur HTTP {response.status_code}: {data.get('error', 'Erreur inconnue')}")
            return False
            
    except requests.exceptions.RequestException as e:
        print_result(False, f"Erreur de connexion: {e}")
        return False

def test_market_report():
    """Teste la g√©n√©ration de rapport de march√©"""
    print_section("Test de g√©n√©ration de rapport de march√©")
    
    try:
        payload = {"location": "global"}
        response = requests.post(
            f"{API_BASE}/market-report",
            json=payload,
            timeout=30
        )
        data = response.json()
        
        if response.status_code == 200 and data.get('success'):
            print_result(True, "Rapport de march√© g√©n√©r√© avec succ√®s", data)
            return True
        else:
            error_msg = data.get('error', 'Erreur inconnue')
            print_result(False, f"Erreur g√©n√©ration rapport: {error_msg}")
            return False
            
    except requests.exceptions.RequestException as e:
        print_result(False, f"Erreur de connexion: {e}")
        return False

def test_daily_news():
    """Teste la r√©cup√©ration des nouvelles quotidiennes"""
    print_section("Test de r√©cup√©ration des nouvelles quotidiennes")
    
    try:
        payload = {"categories": ["market", "crypto", "forex"]}
        response = requests.post(
            f"{API_BASE}/daily-news",
            json=payload,
            timeout=30
        )
        data = response.json()
        
        if response.status_code == 200 and data.get('success'):
            print_result(True, f"{data.get('total_items', 0)} nouvelles r√©cup√©r√©es", data)
            return True
        else:
            error_msg = data.get('error', 'Erreur inconnue')
            print_result(False, f"Erreur r√©cup√©ration nouvelles: {error_msg}")
            return False
            
    except requests.exceptions.RequestException as e:
        print_result(False, f"Erreur de connexion: {e}")
        return False

def test_financial_markets_search():
    """Teste la recherche de march√©s financiers"""
    print_section("Test de recherche de march√©s financiers")
    
    try:
        payload = {
            "query": "market news today",
            "search_type": "market_news",
            "max_results": 5,
            "date_restrict": "d1"
        }
        response = requests.post(
            f"{API_BASE}/financial-markets",
            json=payload,
            timeout=30
        )
        data = response.json()
        
        if response.status_code == 200 and data.get('success'):
            print_result(True, f"{data.get('total_results', 0)} r√©sultats trouv√©s", data)
            return True
        else:
            error_msg = data.get('error', 'Erreur inconnue')
            print_result(False, f"Erreur recherche march√©s: {error_msg}")
            return False
            
    except requests.exceptions.RequestException as e:
        print_result(False, f"Erreur de connexion: {e}")
        return False

def test_stock_search():
    """Teste la recherche d'actions"""
    print_section("Test de recherche d'actions")
    
    try:
        symbol = "AAPL"
        response = requests.get(
            f"{API_BASE}/stock/{symbol}",
            timeout=30
        )
        data = response.json()
        
        if response.status_code == 200 and data.get('success'):
            print_result(True, f"{data.get('total_results', 0)} r√©sultats trouv√©s pour {symbol}", data)
            return True
        else:
            error_msg = data.get('error', 'Erreur inconnue')
            print_result(False, f"Erreur recherche action {symbol}: {error_msg}")
            return False
            
    except requests.exceptions.RequestException as e:
        print_result(False, f"Erreur de connexion: {e}")
        return False

def test_web_interface():
    """Teste l'interface web"""
    print_section("Test de l'interface web")
    
    try:
        response = requests.get(f"{BASE_URL}/google-search", timeout=10)
        
        if response.status_code == 200:
            print_result(True, "Interface web accessible")
            return True
        else:
            print_result(False, f"Erreur HTTP {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print_result(False, f"Erreur de connexion: {e}")
        return False

def test_integration_with_existing_system():
    """Teste l'int√©gration avec le syst√®me existant"""
    print_section("Test d'int√©gration avec le syst√®me existant")
    
    # Test de l'endpoint de sant√© g√©n√©ral
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=10)
        data = response.json()
        
        if response.status_code == 200:
            print_result(True, "Syst√®me principal op√©rationnel", data)
            return True
        else:
            print_result(False, f"Erreur syst√®me principal: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print_result(False, f"Erreur de connexion: {e}")
        return False

def run_performance_test():
    """Teste les performances de l'API"""
    print_section("Test de performance")
    
    try:
        start_time = time.time()
        
        # Test de plusieurs requ√™tes simultan√©es
        payload = {"location": "global"}
        response = requests.post(
            f"{API_BASE}/market-report",
            json=payload,
            timeout=30
        )
        
        end_time = time.time()
        duration = end_time - start_time
        
        if response.status_code == 200:
            print_result(True, f"Rapport g√©n√©r√© en {duration:.2f} secondes")
            return duration < 30  # Doit √™tre inf√©rieur √† 30 secondes
        else:
            print_result(False, f"Erreur performance: {response.status_code}")
            return False
            
    except requests.exceptions.RequestException as e:
        print_result(False, f"Erreur de connexion: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ D√©marrage des tests Google Search API")
    print(f"üì° URL de base: {BASE_URL}")
    print(f"‚è∞ Timestamp: {datetime.now().isoformat()}")
    
    # R√©sultats des tests
    results = {
        "api_status": False,
        "market_report": False,
        "daily_news": False,
        "financial_markets": False,
        "stock_search": False,
        "web_interface": False,
        "integration": False,
        "performance": False
    }
    
    # Tests
    results["api_status"] = test_api_status()
    
    if results["api_status"]:
        results["market_report"] = test_market_report()
        results["daily_news"] = test_daily_news()
        results["financial_markets"] = test_financial_markets_search()
        results["stock_search"] = test_stock_search()
        results["performance"] = run_performance_test()
    
    results["web_interface"] = test_web_interface()
    results["integration"] = test_integration_with_existing_system()
    
    # R√©sum√©
    print_section("R√©sum√© des tests")
    
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    print(f"üìä Tests r√©ussis: {passed_tests}/{total_tests}")
    print(f"üìà Taux de succ√®s: {(passed_tests/total_tests)*100:.1f}%")
    
    print("\nüìã D√©tail des tests:")
    for test_name, result in results.items():
        status = "‚úÖ" if result else "‚ùå"
        print(f"  {status} {test_name.replace('_', ' ').title()}")
    
    if passed_tests == total_tests:
        print("\nüéâ Tous les tests sont pass√©s avec succ√®s!")
        return True
    else:
        print(f"\n‚ö†Ô∏è {total_tests - passed_tests} test(s) ont √©chou√©")
        return False

if __name__ == "__main__":
    try:
        success = main()
        exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Tests interrompus par l'utilisateur")
        exit(1)
    except Exception as e:
        print(f"\nüí• Erreur inattendue: {e}")
        exit(1) 