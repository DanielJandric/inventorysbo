#!/usr/bin/env python3
"""
Test d'affichage du nouveau prompt OpenAI pour le rapport de march√©
"""

import json
import requests
from datetime import datetime

# Configuration
MANUS_API_BASE_URL = "https://e5h6i7cn86z0.manus.space"

def test_prompt_display():
    """Test d'affichage du nouveau prompt avec donn√©es Manus"""
    
    current_date = datetime.now().strftime('%Y-%m-%d')
    
    print("üìä Test d'affichage du nouveau prompt OpenAI...")
    
    try:
        # 1. Collecter les donn√©es via API Manus
        print("1. Collecte des donn√©es Manus...")
        collect_response = requests.post(f"{MANUS_API_BASE_URL}/api/data/collect", timeout=30)
        if collect_response.status_code != 200:
            print(f"‚ùå Erreur collecte donn√©es Manus: {collect_response.status_code}")
            return
        print("‚úÖ Donn√©es collect√©es")
        
        # 2. R√©cup√©rer les donn√©es d√©taill√©es
        print("2. R√©cup√©ration des donn√©es d√©taill√©es...")
        financial_response = requests.get(f"{MANUS_API_BASE_URL}/api/data/financial", timeout=30)
        financial_data = financial_response.json() if financial_response.status_code == 200 else {}
        
        economic_response = requests.get(f"{MANUS_API_BASE_URL}/api/data/economic", timeout=30)
        economic_data = economic_response.json() if economic_response.status_code == 200 else {}
        
        news_response = requests.get(f"{MANUS_API_BASE_URL}/api/data/news", timeout=30)
        news_data = news_response.json() if news_response.status_code == 200 else {}
        
        print("‚úÖ Donn√©es d√©taill√©es r√©cup√©r√©es")
        
        # 3. Construire le contexte
        context = f"""Donn√©es de march√© actuelles (API Manus) pour {current_date}:

MARCH√âS FINANCIERS:
{json.dumps(financial_data.get('financial_data', {}).get('markets', {}), indent=2, ensure_ascii=False)[:1000]}

OBLIGATIONS:
{json.dumps(financial_data.get('financial_data', {}).get('bonds', []), indent=2, ensure_ascii=False)[:500]}

CRYPTOMONNAIES:
{json.dumps(financial_data.get('crypto_data', {}).get('cryptocurrencies', []), indent=2, ensure_ascii=False)[:500]}

COMMODIT√âS:
{json.dumps(financial_data.get('financial_data', {}).get('commodities', []), indent=2, ensure_ascii=False)[:500]}

DEVISES:
{json.dumps(financial_data.get('financial_data', {}).get('currencies', []), indent=2, ensure_ascii=False)[:500]}

INDICATEURS √âCONOMIQUES:
{json.dumps(economic_data.get('economic_data', {}).get('indicators', {}), indent=2, ensure_ascii=False)[:1000]}

ACTUALIT√âS:
{json.dumps(news_data.get('news_data', {}), indent=2, ensure_ascii=False)[:1000]}"""

        # 4. Nouveau prompt
        prompt = f"""Tu es un analyste financier senior. Tu dois cr√©er un rapport de march√© complet et professionnel pour {current_date} en utilisant EXCLUSIVEMENT les donn√©es fournies par l'API Manus.

INSTRUCTIONS OBLIGATOIRES :
1. CR√âE un rapport complet et structur√©
2. UTILISE toutes les donn√©es disponibles
3. ANALYSE chaque classe d'actifs mentionn√©e
4. FOURNIS des insights concrets et actionnables
5. STRUCTURE ton rapport de mani√®re professionnelle

STRUCTURE DU RAPPORT :
1. R√âSUM√â EX√âCUTIF (2-3 phrases cl√©s)
2. MARCH√âS ACTIONS (USA, Europe, Suisse, Asie si pertinent)
3. OBLIGATIONS ET TAUX (souverains, corporate, spreads)
4. CRYPTOMONNAIES (BTC, ETH, altcoins, r√©gulation)
5. COMMODIT√âS (p√©trole, or, m√©taux, agriculture)
6. DEVISES (paires majeures, √©mergentes)
7. INDICATEURS √âCONOMIQUES (inflation, emploi, PMI)
8. ACTUALIT√âS IMPACTANTES (g√©opolitique, banques centrales)
9. PERSPECTIVES ET RISQUES (signaux √† surveiller)

STYLE :
- Ton professionnel et direct
- Donn√©es chiffr√©es pr√©cises
- Analyse factuelle bas√©e sur les donn√©es
- Insights strat√©giques pour l'investisseur
- Longueur : 800-1200 mots

Donn√©es √† analyser :
{context}

IMPORTANT : Si certaines donn√©es sont manquantes ou vides, indique-le clairement. Ne fais pas d'hypoth√®ses sur des donn√©es non fournies. Base ton analyse UNIQUEMENT sur les donn√©es r√©elles disponibles."""

        # 5. Afficher le prompt et les donn√©es
        print("\n" + "="*80)
        print("üîç NOUVEAU PROMPT OPENAI")
        print("="*80)
        print(prompt)
        print("="*80)
        
        # 6. Afficher les donn√©es disponibles
        print("\n" + "="*80)
        print("üìä DONN√âES DISPONIBLES")
        print("="*80)
        
        print(f"üìà March√©s financiers: {len(financial_data.get('financial_data', {}).get('markets', {}))} indices")
        print(f"üìä Obligations: {len(financial_data.get('financial_data', {}).get('bonds', []))} obligations")
        print(f"ü™ô Cryptomonnaies: {len(financial_data.get('crypto_data', {}).get('cryptocurrencies', []))} cryptos")
        print(f"üõ¢Ô∏è Commodit√©s: {len(financial_data.get('financial_data', {}).get('commodities', []))} commodit√©s")
        print(f"üí± Devises: {len(financial_data.get('financial_data', {}).get('currencies', []))} paires")
        print(f"üìä Indicateurs √©conomiques: {len(economic_data.get('economic_data', {}).get('indicators', {}))} indicateurs")
        print(f"üì∞ Actualit√©s: {len(news_data.get('news_data', {}))} articles")
        
        # 7. Sauvegarder le prompt pour r√©f√©rence
        with open(f"nouveau_prompt_{current_date}.txt", "w", encoding="utf-8") as f:
            f.write("=== NOUVEAU PROMPT OPENAI ===\n\n")
            f.write(prompt)
            f.write("\n\n=== DONN√âES DISPONIBLES ===\n\n")
            f.write(f"March√©s: {len(financial_data.get('financial_data', {}).get('markets', {}))}\n")
            f.write(f"Obligations: {len(financial_data.get('financial_data', {}).get('bonds', []))}\n")
            f.write(f"Cryptos: {len(financial_data.get('crypto_data', {}).get('cryptocurrencies', []))}\n")
            f.write(f"Commodit√©s: {len(financial_data.get('financial_data', {}).get('commodities', []))}\n")
            f.write(f"Devises: {len(financial_data.get('financial_data', {}).get('currencies', []))}\n")
            f.write(f"Indicateurs: {len(economic_data.get('economic_data', {}).get('indicators', {}))}\n")
            f.write(f"Actualit√©s: {len(news_data.get('news_data', {}))}\n")
        
        print(f"\nüíæ Prompt sauvegard√© dans nouveau_prompt_{current_date}.txt")
        print("\n‚úÖ Test termin√© - Le nouveau prompt est pr√™t √† √™tre utilis√© !")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    test_prompt_display() 