#!/usr/bin/env python3
"""
Script de diagnostic pour analyser pourquoi certains champs sont vides dans market_analyses
"""

import os
import json
import logging
from datetime import datetime
from typing import Dict, List, Any

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def analyze_market_analyses():
    """Analyse les donn√©es de la table market_analyses"""
    try:
        from market_analysis_db import get_market_analysis_db
        db = get_market_analysis_db()
        
        if not db.is_connected():
            logger.error("‚ùå Pas de connexion √† la base de donn√©es")
            return
        
        # R√©cup√©rer les 10 derni√®res analyses
        analyses = db.get_recent_analyses(limit=10)
        
        if not analyses:
            logger.warning("‚ö†Ô∏è Aucune analyse trouv√©e")
            return
        
        logger.info(f"üìä Analyse de {len(analyses)} rapports r√©cents")
        logger.info("=" * 60)
        
        for i, analysis in enumerate(analyses, 1):
            logger.info(f"\nüìã Rapport #{i} (ID: {analysis.id})")
            logger.info(f"   - Type: {analysis.analysis_type}")
            logger.info(f"   - Date: {analysis.timestamp}")
            logger.info(f"   - Statut: {analysis.worker_status}")
            
            # Analyser chaque champ
            fields_to_check = [
                ('executive_summary', analysis.executive_summary),
                ('summary', analysis.summary),
                ('key_points', analysis.key_points),
                ('insights', analysis.insights),
                ('risks', analysis.risks),
                ('opportunities', analysis.opportunities),
                ('sources', analysis.sources),
                ('structured_data', analysis.structured_data),
                ('geopolitical_analysis', analysis.geopolitical_analysis),
                ('economic_indicators', analysis.economic_indicators)
            ]
            
            for field_name, field_value in fields_to_check:
                if field_value is None:
                    logger.warning(f"   ‚ùå {field_name}: NULL")
                elif isinstance(field_value, list) and len(field_value) == 0:
                    logger.warning(f"   ‚ö†Ô∏è {field_name}: Liste vide")
                elif isinstance(field_value, dict) and len(field_value) == 0:
                    logger.warning(f"   ‚ö†Ô∏è {field_name}: Dictionnaire vide")
                elif isinstance(field_value, str) and len(field_value.strip()) == 0:
                    logger.warning(f"   ‚ö†Ô∏è {field_name}: String vide")
                else:
                    if isinstance(field_value, list):
                        logger.info(f"   ‚úÖ {field_name}: {len(field_value)} √©l√©ments")
                    elif isinstance(field_value, dict):
                        logger.info(f"   ‚úÖ {field_name}: {len(field_value)} cl√©s")
                    else:
                        logger.info(f"   ‚úÖ {field_name}: {len(str(field_value))} caract√®res")
            
            # Analyser le structured_data en d√©tail
            if analysis.structured_data:
                logger.info(f"   üîç Structured_data contient:")
                for key in analysis.structured_data.keys():
                    logger.info(f"      - {key}")
            
            logger.info("-" * 40)
    
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'analyse: {e}")

def test_llm_response_format():
    """Test du format de r√©ponse LLM attendu"""
    logger.info("\nüß™ Test du format de r√©ponse LLM")
    logger.info("=" * 60)
    
    # Exemple de r√©ponse LLM correcte
    correct_response = {
        "executive_summary": [
            "Point 1: Analyse des march√©s",
            "Point 2: Focus sur l'IA",
            "Point 3: Tendance positive"
        ],
        "summary": "R√©sum√© d√©taill√© de l'analyse...",
        "key_points": [
            "Point cl√© 1",
            "Point cl√© 2",
            "Point cl√© 3"
        ],
        "insights": [
            "Insight 1: Observation importante",
            "Insight 2: Tendance √©mergente"
        ],
        "risks": [
            "Risque 1: Volatilit√© des march√©s",
            "Risque 2: Tensions g√©opolitiques"
        ],
        "opportunities": [
            "Opportunit√© 1: Secteur technologique",
            "Opportunit√© 2: March√©s √©mergents"
        ],
        "sources": [
            {"title": "Source 1", "url": "http://example.com"}
        ],
        "confidence_score": 0.85
    }
    
    logger.info("‚úÖ Format de r√©ponse LLM correct:")
    for key, value in correct_response.items():
        if isinstance(value, list):
            logger.info(f"   - {key}: {len(value)} √©l√©ments")
        else:
            logger.info(f"   - {key}: {type(value).__name__}")
    
    # Exemple de r√©ponse LLM probl√©matique
    problematic_response = {
        "executive_summary": ["Point 1"],
        "summary": "R√©sum√© court",
        "key_points": ["Point cl√© 1"],
        "insights": [],  # Liste vide
        "risks": [],     # Liste vide
        "opportunities": [],  # Liste vide
        "sources": [],
        "confidence_score": 0.5
    }
    
    logger.info("\n‚ùå Format de r√©ponse LLM probl√©matique:")
    for key, value in problematic_response.items():
        if isinstance(value, list) and len(value) == 0:
            logger.warning(f"   - {key}: LISTE VIDE")
        else:
            logger.info(f"   - {key}: {type(value).__name__}")

def check_prompt_requirements():
    """V√©rifie les exigences du prompt LLM"""
    logger.info("\nüìù V√©rification des exigences du prompt LLM")
    logger.info("=" * 60)
    
    # Lire le fichier scrapingbee_scraper.py pour extraire le prompt
    try:
        with open('scrapingbee_scraper.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Chercher les mentions d'insights, risks, opportunities
        if 'insights' in content and 'risks' in content and 'opportunities' in content:
            logger.info("‚úÖ Le prompt mentionne bien insights, risks, opportunities")
        else:
            logger.warning("‚ö†Ô∏è Le prompt ne mentionne pas tous les champs requis")
        
        # Chercher les exigences de format
        if 'FORMAT DE SORTIE CRITIQUE' in content:
            logger.info("‚úÖ Le prompt contient des exigences de format strictes")
        else:
            logger.warning("‚ö†Ô∏è Le prompt ne contient pas d'exigences de format strictes")
        
        # Chercher le sch√©ma JSON
        if 'json_schema' in content:
            logger.info("‚úÖ Le prompt utilise un sch√©ma JSON")
        else:
            logger.warning("‚ö†Ô∏è Le prompt n'utilise pas de sch√©ma JSON")
            
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la lecture du prompt: {e}")

def main():
    """Fonction principale"""
    logger.info("üîç Diagnostic des champs vides dans market_analyses")
    logger.info("=" * 60)
    
    analyze_market_analyses()
    test_llm_response_format()
    check_prompt_requirements()
    
    logger.info("\nüéØ Recommandations:")
    logger.info("1. V√©rifier que le LLM g√©n√®re bien tous les champs requis")
    logger.info("2. Ajouter des fallbacks pour g√©n√©rer du contenu si les champs sont vides")
    logger.info("3. Am√©liorer le prompt pour √™tre plus explicite sur les champs requis")
    logger.info("4. Ajouter des logs d√©taill√©s lors de la sauvegarde")

if __name__ == "__main__":
    main()
