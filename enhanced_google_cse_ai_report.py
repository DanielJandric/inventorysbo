#!/usr/bin/env python3
"""
Version am√©lior√©e de l'int√©gration Google CSE + IA OpenAI pour les rapports de march√©
"""
import os
import re
import json
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from datetime import datetime, timedelta
from dotenv import load_dotenv
from google_cse_integration import GoogleCSEIntegration
from openai import OpenAI

@dataclass
class EnhancedMarketData:
    """Donn√©es de march√© enrichies"""
    market_summary: str
    stock_prices: Dict[str, Dict]
    market_news: List[str]
    sector_data: Dict[str, str]
    economic_indicators: Dict[str, str]
    sources: List[str]

@dataclass
class EnhancedMarketReport:
    """Rapport de march√© enrichi par IA"""
    summary: str
    key_events: List[str]
    market_sentiment: str
    top_gainers: List[Dict]
    top_losers: List[Dict]
    sector_performance: Dict[str, str]
    recommendations: List[str]
    economic_analysis: str
    risk_assessment: str
    sources: List[str]
    generated_at: datetime

class EnhancedGoogleCSEAIReport:
    """Gestionnaire am√©lior√© pour rapports de march√© avec Google CSE + IA"""
    
    def __init__(self):
        load_dotenv()
        self.cse = GoogleCSEIntegration()
        self.openai_client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        
    def get_comprehensive_market_data(self) -> EnhancedMarketData:
        """R√©cup√®re des donn√©es de march√© compl√®tes via Google CSE"""
        print("üîç Collecte de donn√©es de march√© via Google CSE...")
        
        # Recherches sp√©cifiques pour diff√©rents aspects du march√©
        search_queries = {
            "market_overview": [
                "stock market today overview",
                "market indices S&P 500 NASDAQ Dow Jones",
                "market sentiment today",
                "trading volume market activity"
            ],
            "stock_prices": [
                "AAPL stock price today",
                "GOOGL stock price today", 
                "MSFT stock price today",
                "TSLA stock price today",
                "AMZN stock price today",
                "META stock price today",
                "NVDA stock price today"
            ],
            "market_news": [
                "stock market news today",
                "market headlines today",
                "financial news breaking",
                "earnings reports today"
            ],
            "sector_performance": [
                "technology sector performance today",
                "financial sector performance today",
                "healthcare sector performance today",
                "energy sector performance today"
            ],
            "economic_indicators": [
                "inflation data today",
                "interest rates Federal Reserve",
                "unemployment data",
                "GDP growth economic indicators"
            ]
        }
        
        market_data = {}
        
        # Collecter les donn√©es pour chaque cat√©gorie
        for category, queries in search_queries.items():
            market_data[category] = {}
            for query in queries:
                response = self.cse.search(query, num_results=3)
                if response and response.results:
                    market_data[category][query] = [
                        {
                            'title': result.title,
                            'snippet': result.snippet,
                            'url': result.link
                        }
                        for result in response.results
                    ]
        
        # Extraire les prix d'actions
        stock_prices = {}
        for query in search_queries["stock_prices"]:
            symbol = query.split()[0]  # Extraire le symbole
            response = self.cse.search(query, num_results=2)
            if response and response.results:
                price_data = self._extract_price_from_results(response.results, symbol)
                if price_data:
                    stock_prices[symbol] = price_data
        
        # Pr√©parer les donn√©es enrichies
        return EnhancedMarketData(
            market_summary=self._create_market_summary(market_data),
            stock_prices=stock_prices,
            market_news=self._extract_news_headlines(market_data.get("market_news", {})),
            sector_data=self._extract_sector_data(market_data.get("sector_performance", {})),
            economic_indicators=self._extract_economic_data(market_data.get("economic_indicators", {})),
            sources=["Google CSE"]
        )
    
    def generate_enhanced_ai_report(self, symbols: List[str] = None) -> EnhancedMarketReport:
        """G√©n√®re un rapport enrichi avec l'IA bas√© sur Google CSE"""
        print("üìä G√©n√©ration du rapport enrichi avec IA...")
        
        # R√©cup√©rer les donn√©es de march√©
        market_data = self.get_comprehensive_market_data()
        
        # Pr√©parer le prompt pour l'IA
        ai_prompt = self._create_enhanced_ai_prompt(market_data, symbols)
        
        # G√©n√©rer le rapport avec l'IA
        ai_report = self._generate_ai_report(ai_prompt)
        
        return ai_report
    
    def _extract_price_from_results(self, results: List, symbol: str) -> Optional[Dict]:
        """Extrait les prix des r√©sultats Google CSE"""
        for result in results:
            # Patterns pour extraire les prix
            price_patterns = [
                rf'\${symbol}\s*\$?(\d+\.?\d*)',
                rf'{symbol}\s*\$?(\d+\.?\d*)',
                r'\$(\d+\.?\d*)\s*per\s*share',
                r'trading\s+at\s*\$(\d+\.?\d*)',
                r'current\s+price\s*\$(\d+\.?\d*)'
            ]
            
            for pattern in price_patterns:
                match = re.search(pattern, result.snippet, re.IGNORECASE)
                if match:
                    return {
                        'price': match.group(1),
                        'source': result.title,
                        'url': result.link,
                        'snippet': result.snippet[:100]
                    }
        return None
    
    def _create_market_summary(self, market_data: Dict) -> str:
        """Cr√©e un r√©sum√© du march√©"""
        summary = "üìä R√âSUM√â DU MARCH√â (Google CSE)\n\n"
        
        # Ajouter les donn√©es de march√©
        if "market_overview" in market_data:
            summary += "üéØ VUE D'ENSEMBLE:\n"
            for query, results in market_data["market_overview"].items():
                if results:
                    summary += f"   ‚Ä¢ {query}: {results[0]['snippet'][:150]}...\n"
            summary += "\n"
        
        # Ajouter les prix d'actions
        if "stock_prices" in market_data:
            summary += "üí∞ PRIX D'ACTIONS:\n"
            for query, results in market_data["stock_prices"].items():
                if results:
                    symbol = query.split()[0]
                    summary += f"   ‚Ä¢ {symbol}: {results[0]['snippet'][:100]}...\n"
            summary += "\n"
        
        return summary
    
    def _extract_news_headlines(self, news_data: Dict) -> List[str]:
        """Extrait les titres de nouvelles"""
        headlines = []
        for query, results in news_data.items():
            for result in results:
                headlines.append(f"{result['title']}: {result['snippet'][:100]}...")
        return headlines[:10]  # Limiter √† 10 nouvelles
    
    def _extract_sector_data(self, sector_data: Dict) -> Dict[str, str]:
        """Extrait les donn√©es sectorielles"""
        sectors = {}
        for query, results in sector_data.items():
            if results:
                sector_name = query.split()[0].capitalize()
                sectors[sector_name] = results[0]['snippet'][:100]
        return sectors
    
    def _extract_economic_data(self, economic_data: Dict) -> Dict[str, str]:
        """Extrait les indicateurs √©conomiques"""
        indicators = {}
        for query, results in economic_data.items():
            if results:
                indicator_name = query.split()[0].capitalize()
                indicators[indicator_name] = results[0]['snippet'][:100]
        return indicators
    
    def _create_enhanced_ai_prompt(self, market_data: EnhancedMarketData, symbols: List[str] = None) -> str:
        """Cr√©e un prompt enrichi pour l'IA"""
        
        prompt = f"""
Tu es un analyste financier expert sp√©cialis√© dans les rapports de march√©. 
G√©n√®re un rapport journalier complet bas√© sur les donn√©es Google CSE suivantes:

{market_data.market_summary}

üì∞ NOUVELLES DU MARCH√â:
{chr(10).join([f"‚Ä¢ {news}" for news in market_data.market_news[:5]])}

üìà PERFORMANCES SECTORIELLES:
{chr(10).join([f"‚Ä¢ {sector}: {data}" for sector, data in market_data.sector_data.items()])}

üìä INDICATEURS √âCONOMIQUES:
{chr(10).join([f"‚Ä¢ {indicator}: {data}" for indicator, data in market_data.economic_indicators.items()])}

üí∞ PRIX D'ACTIONS PRINCIPALES:
{chr(10).join([f"‚Ä¢ {symbol}: ${data['price']} ({data['source']})" for symbol, data in market_data.stock_prices.items()])}

G√©n√®re un rapport structur√© au format JSON avec:
1. R√©sum√© ex√©cutif (3-4 phrases)
2. √âv√©nements cl√©s du jour (liste)
3. Sentiment du march√© (hausse/baisse/neutre avec pourcentage)
4. Top gagnants et perdants
5. Analyse sectorielle
6. Recommandations d'investissement (3-4 points)
7. √âvaluation des risques
8. Analyse √©conomique

Format JSON:
{{
    "summary": "r√©sum√© ex√©cutif d√©taill√©",
    "key_events": ["√©v√©nement 1", "√©v√©nement 2", "√©v√©nement 3"],
    "market_sentiment": "hausse/baisse/neutre avec pourcentage",
    "top_gainers": [{{"symbol": "AAPL", "change": "+2.5%", "reason": "raison"}}],
    "top_losers": [{{"symbol": "TSLA", "change": "-1.8%", "reason": "raison"}}],
    "sector_performance": {{"tech": "+1.2%", "finance": "-0.5%", "healthcare": "+0.8%"}},
    "recommendations": ["recommandation 1", "recommandation 2", "recommandation 3"],
    "risk_assessment": "√©valuation des risques actuels",
    "economic_analysis": "analyse √©conomique du jour"
}}
"""
        return prompt
    
    def _generate_ai_report(self, prompt: str) -> EnhancedMarketReport:
        """G√©n√®re le rapport avec l'IA"""
        try:
            import os
            from gpt5_compat import from_chat_completions_compat
            response = from_chat_completions_compat(
                client=self.openai_client,
                model=os.getenv("AI_MODEL", "gpt-5"),
                messages=[
                    {"role": "system", "content": "Tu es un analyste financier expert avec 20 ans d'exp√©rience. Tu utilises Google CSE comme source principale pour tes analyses."},
                    {"role": "user", "content": prompt}
                ],
                max_completion_tokens=2000
            )
            
            ai_response = response.choices[0].message.content
            
            # Parser la r√©ponse JSON
            try:
                report_data = json.loads(ai_response)
            except json.JSONDecodeError:
                # Fallback si le JSON n'est pas valide
                report_data = {
                    "summary": "Rapport g√©n√©r√© avec Google CSE et IA",
                    "key_events": ["Analyse en cours"],
                    "market_sentiment": "neutre",
                    "top_gainers": [],
                    "top_losers": [],
                    "sector_performance": {},
                    "recommendations": ["Consulter un conseiller financier"],
                    "risk_assessment": "√âvaluation en cours",
                    "economic_analysis": "Analyse √©conomique en cours"
                }
            
            return EnhancedMarketReport(
                summary=report_data.get("summary", ""),
                key_events=report_data.get("key_events", []),
                market_sentiment=report_data.get("market_sentiment", "neutre"),
                top_gainers=report_data.get("top_gainers", []),
                top_losers=report_data.get("top_losers", []),
                sector_performance=report_data.get("sector_performance", {}),
                recommendations=report_data.get("recommendations", []),
                economic_analysis=report_data.get("economic_analysis", ""),
                risk_assessment=report_data.get("risk_assessment", ""),
                sources=["Google CSE", "OpenAI GPT-4"],
                generated_at=datetime.now()
            )
            
        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration rapport IA: {e}")
            return EnhancedMarketReport(
                summary="Erreur lors de la g√©n√©ration du rapport",
                key_events=[],
                market_sentiment="neutre",
                top_gainers=[],
                top_losers=[],
                sector_performance={},
                recommendations=["V√©rifier la configuration"],
                economic_analysis="Analyse non disponible",
                risk_assessment="√âvaluation non disponible",
                sources=["Google CSE"],
                generated_at=datetime.now()
            )

def test_enhanced_report():
    """Test du rapport enrichi"""
    print("üß™ Test Rapport Enrichi Google CSE + IA")
    print("=" * 60)
    
    manager = EnhancedGoogleCSEAIReport()
    
    # Test du rapport enrichi
    print("\nüìä G√©n√©ration du rapport enrichi...")
    report = manager.generate_enhanced_ai_report(['AAPL', 'GOOGL', 'MSFT', 'TSLA'])
    
    print(f"\n‚úÖ Rapport g√©n√©r√©:")
    print(f"   üìù R√©sum√©: {report.summary[:200]}...")
    print(f"   üìà Sentiment: {report.market_sentiment}")
    print(f"   üì∞ √âv√©nements: {len(report.key_events)}")
    print(f"   üí∞ Gagnants: {len(report.top_gainers)}")
    print(f"   üìâ Perdants: {len(report.top_losers)}")
    print(f"   üéØ Recommandations: {len(report.recommendations)}")
    print(f"   ‚ö†Ô∏è Risques: {report.risk_assessment[:100]}...")
    print(f"   üìä Analyse √©conomique: {report.economic_analysis[:100]}...")
    print(f"   üîó Sources: {', '.join(report.sources)}")

if __name__ == "__main__":
    test_enhanced_report() 