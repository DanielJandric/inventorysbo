#!/usr/bin/env python3
"""
Module de gestion de la recherche web OpenAI pour les informations financi√®res
"""

import os
import logging
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass
from enum import Enum
import requests
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WebSearchType(Enum):
    """Types de recherche web disponibles"""
    MARKET_DATA = "market_data"
    FINANCIAL_NEWS = "financial_news"
    STOCK_ANALYSIS = "stock_analysis"
    ECONOMIC_INDICATORS = "economic_indicators"
    CRYPTO_MARKET = "crypto_market"
    FOREX_MARKET = "forex_market"
    COMMODITIES = "commodities"
    CENTRAL_BANKS = "central_banks"
    GEOPOLITICAL = "geopolitical"

@dataclass
class WebSearchResult:
    """R√©sultat d'une recherche web"""
    query: str
    content: str
    citations: List[Dict[str, Any]]
    search_call_id: str
    timestamp: str
    search_type: WebSearchType
    domains_searched: Optional[List[str]] = None
    user_location: Optional[Dict[str, str]] = None

@dataclass
class FinancialMarketData:
    """Donn√©es de march√© financier structur√©es"""
    indices: Dict[str, Dict[str, Any]]
    bonds: Dict[str, Dict[str, Any]]
    crypto: Dict[str, Dict[str, Any]]
    forex: Dict[str, Dict[str, Any]]
    commodities: Dict[str, Dict[str, Any]]
    news: List[Dict[str, Any]]
    timestamp: str
    source: str

class OpenAIWebSearchManager:
    """Gestionnaire de recherche web OpenAI pour les informations financi√®res"""
    
    def __init__(self, openai_client):
        self.openai_client = openai_client
        self.cache = {}
        self.cache_duration = 1800  # 30 minutes
        
    def search_financial_markets(self, 
                                search_type: WebSearchType = WebSearchType.MARKET_DATA,
                                user_location: Optional[Dict[str, str]] = None,
                                search_context_size: str = "medium") -> Optional[WebSearchResult]:
        """
        Effectue une recherche web pour les informations financi√®res
        
        Args:
            search_type: Type de recherche √† effectuer
            user_location: Localisation de l'utilisateur pour affiner les r√©sultats
            search_context_size: Taille du contexte de recherche (low/medium/high)
            
        Returns:
            WebSearchResult ou None en cas d'erreur
        """
        try:
            # Construire la requ√™te selon le type de recherche
            query = self._build_search_query(search_type)
            
            tool_candidates = [{"type": "web_search"}, {"type": "web_search_preview"}]
            response = None
            last_err = None
            for t in tool_candidates:
                try:
                    if user_location:
                        t = {**t, "user_location": {"type": "approximate", **user_location}}
                    response = self.openai_client.responses.create(
                        model=os.getenv("AI_MODEL", "gpt-5"),
                        tools=[t],
                        input=[{"role":"user","content":[{"type":"input_text","text": query}]}],
                        reasoning={"effort": "high"}
                    )
                    break
                except Exception as e:
                    last_err = e
                    continue
            if response is None:
                raise last_err or RuntimeError("web_search tool unavailable")
            
            # Traiter la r√©ponse
            return self._process_web_search_response(response, search_type, query)
            
        except Exception as e:
            logger.error(f"Erreur recherche web financi√®re: {e}")
            return None
    
    def _build_search_query(self, search_type: WebSearchType) -> str:
        """Construit la requ√™te de recherche selon le type"""
        
        current_date = datetime.now().strftime('%d/%m/%Y')
        
        queries = {
            WebSearchType.MARKET_DATA: f"""Recherche les donn√©es de march√© actuelles pour {current_date}:
- Indices boursiers (S&P 500, NASDAQ, Dow Jones, Euro Stoxx 50, DAX, CAC 40, Swiss Market Index)
- Rendements obligataires (US 10Y, Bund 10Y, OAT 10Y, BTP 10Y)
- Cryptoactifs (Bitcoin, Ethereum, capitalisation globale)
- Devises (EUR/USD, USD/CHF, GBP/USD)
- Commodities (Or, P√©trole)
Fournis les donn√©es avec les variations et tendances actuelles.""",
            
            WebSearchType.FINANCIAL_NEWS: f"""Recherche les actualit√©s financi√®res importantes du {current_date}:
- Actualit√©s macro√©conomiques
- D√©cisions de banques centrales
- Rapports de r√©sultats d'entreprises
- √âv√©nements g√©opolitiques impactant les march√©s
- Tendances sectorielles""",
            
            WebSearchType.STOCK_ANALYSIS: f"""Recherche les analyses boursi√®res actuelles pour {current_date}:
- Recommandations d'analystes
- Revisions de prix cibles
- Changements de notation
- Tendances sectorielles
- Opportunit√©s d'investissement""",
            
            WebSearchType.ECONOMIC_INDICATORS: f"""Recherche les indicateurs √©conomiques r√©cents:
- PIB, inflation, ch√¥mage
- Indices de confiance
- Donn√©es de consommation
- Indicateurs de production
- Tendances √©conomiques globales""",
            
            WebSearchType.CRYPTO_MARKET: f"""Recherche les donn√©es du march√© crypto pour {current_date}:
- Prix Bitcoin, Ethereum et autres cryptos majeures
- Capitalisation globale
- Volumes d'√©change
- Actualit√©s r√©glementaires
- Tendances DeFi et NFT""",
            
            WebSearchType.FOREX_MARKET: f"""Recherche les donn√©es du march√© des changes pour {current_date}:
- Paires de devises majeures
- Corr√©lations avec les march√©s actions
- Interventions de banques centrales
- Tendances de carry trade
- Volatilit√© des devises""",
            
            WebSearchType.COMMODITIES: f"""Recherche les donn√©es des mati√®res premi√®res pour {current_date}:
- Prix du p√©trole (Brent, WTI)
- M√©taux pr√©cieux (Or, Argent, Platine)
- M√©taux industriels (Cuivre, Aluminium)
- Produits agricoles
- Tendances de l'√©nergie""",
            
            WebSearchType.CENTRAL_BANKS: f"""Recherche les actualit√©s des banques centrales:
- D√©cisions de politique mon√©taire
- Communications des gouverneurs
- Perspectives d'inflation
- √âvolutions des taux directeurs
- Impact sur les march√©s""",
            
            WebSearchType.GEOPOLITICAL: f"""Recherche les √©v√©nements g√©opolitiques impactant les march√©s:
- Tensions internationales
- Accords commerciaux
- √âlections importantes
- Sanctions √©conomiques
- Impact sur les march√©s financiers"""
        }
        
        return queries.get(search_type, queries[WebSearchType.MARKET_DATA])
    
    def _process_web_search_response(self, response, search_type: WebSearchType, original_query: str) -> Optional[WebSearchResult]:
        """Traite la r√©ponse de recherche web OpenAI"""
        try:
            # Extraire les informations de la r√©ponse
            web_search_call = None
            message_content = None
            citations = []
            
            for output_item in response.output:
                if output_item.type == "web_search_call":
                    web_search_call = output_item
                elif output_item.type == "message":
                    message_content = output_item.content[0].text
                    # Extraire les citations
                    if hasattr(output_item.content[0], 'annotations'):
                        for annotation in output_item.content[0].annotations:
                            if annotation.type == "url_citation":
                                citations.append({
                                    "url": annotation.url,
                                    "title": annotation.title,
                                    "start_index": annotation.start_index,
                                    "end_index": annotation.end_index
                                })
            
            if not message_content:
                logger.error("Contenu de r√©ponse vide")
                return None
            
            # Construire le r√©sultat
            result = WebSearchResult(
                query=original_query,
                content=message_content,
                citations=citations,
                search_call_id=web_search_call.id if web_search_call else "",
                timestamp=datetime.now().isoformat(),
                search_type=search_type,
                domains_searched=web_search_call.domains if web_search_call else None
            )
            
            logger.info(f"‚úÖ Recherche web r√©ussie pour {search_type.value}")
            return result
            
        except Exception as e:
            logger.error(f"Erreur traitement r√©ponse web search: {e}")
            return None
    
    def get_comprehensive_market_briefing(self, user_location: Optional[Dict[str, str]] = None) -> Optional[str]:
        """
        G√©n√®re un briefing de march√© complet en utilisant la recherche web
        
        Args:
            user_location: Localisation de l'utilisateur
            
        Returns:
            Contenu du briefing ou None en cas d'erreur
        """
        try:
            current_date = datetime.now().strftime('%d/%m/%Y')
            
            # PROMPT optimis√© (analyste senior) ‚Äì focus sur la s√©ance du jour
            prompt = f"""# PROMPT OPTIMIS√â : ANALYSTE SENIOR MARCH√âS FINANCIERS (Date: {current_date})

## üéØ IDENTIT√â ET MISSION

Tu es un **Directeur de Recherche Senior** combinant expertise en:
- **Finance quantitative** (20+ ans d'exp√©rience sell-side)
- **G√©opolitique appliqu√©e** (focus sur impacts march√©s)
- **Intelligence artificielle** (analyse pr√©dictive et pattern recognition)

**Audience cible**: C-Suite, gestionnaires de fonds institutionnels, traders professionnels
**Objectif**: Produire une analyse **actionnable** avec signaux de trading clairs

## üß† CADRE ANALYTIQUE MULTI-DIMENSIONNEL

### 1. HI√âRARCHIE COGNITIVE
Applique une analyse √† 4 niveaux:
1. **Niveau Micro**: Prix, volumes, indicateurs techniques
2. **Niveau M√©so**: Secteurs, corr√©lations inter-march√©s, flux
3. **Niveau Macro**: Politique mon√©taire, donn√©es √©conomiques
4. **Niveau M√©ta**: G√©opolitique, changements structurels, r√©gimes de march√©

### 2. INT√âGRATION TEMPORELLE
Pour chaque insight, consid√®re:
- **T-1**: Contexte historique et momentum
- **T0**: √âtat actuel et d√©s√©quilibres
- **T+1**: Sc√©narios probabilistes (base/bull/bear)

### 3. ANALYSE CAUSALE
Pour chaque mouvement significatif (>0.5œÉ):
- Identifie la **cause primaire** (catalyst)
- Trace les **effets de second ordre**
- Anticipe les **r√©actions en cha√Æne**

## üîç STRAT√âGIE DE RECHERCHE WEB INTELLIGENTE

Active le tool `web_search` si besoin (donn√©es manquantes critiques, anomalies >3œÉ, √©v√©nements g√©opolitiques, validations critiques). Priorise sources Tier 1 (Bloomberg, Reuters, FT, WSJ). Limite √† 5 requ√™tes.

Format de requ√™te optimal: "[ACTIF/√âV√âNEMENT] + [TIMEFRAME] + [IMPACT/ANALYSE]". Exemple: "NVDA earnings Q4 2024 market impact analysis".

## üìä R√àGLES DE DONN√âES STRICTES

Hi√©rarchie: 1) `market_snapshot` prioritaire, 2) web_search pour contexte, 3) jamais inventer ("N/D" avec explication). Pour signaux: divergences prix/volume (>20% 20j), sectorielles (z>2), g√©ographiques (>1œÉ).

## üé® FORMAT DE SORTIE

Renvoie un JSON complet selon ce sch√©ma (extrait) avec sections: `meta_analysis`, `executive_dashboard` (dont `top_trades`, `snapshot_metrics`), `deep_analysis` (narrative 3000+ chars, rotation sectorielle, corr√©lations, focus IA, chess g√©opolitique), `quantitative_signals`, `risk_management`, `actionable_summary`, `metadata` (timestamps, qualit√© des donn√©es, prochaine mise √† jour).

Inclure un marquage explicite des sources: `source_type` (market_data/web_search/hybrid), `search_confidence`, `search_queries_used`.

## üéØ T√ÇCHE

Construit un briefing pour la s√©ance du jour ({current_date}), en te basant sur des donn√©es R√âELLES:
- Indices boursiers (S&P 500, NASDAQ, Dow Jones, Euro Stoxx 50, DAX, CAC 40, Swiss Market Index)
- Rendements obligataires (US 2Y/10Y, Bund/OAT/BTP 10Y)
- Cryptoactifs (BTC, ETH, capitalisation globale)
- Devises (DXY, EUR/USD, USD/CHF, GBP/USD)
- Commodities (Brent/WTI, Or)
- Macro/banques centrales/g√©opolitique (stats, d√©cisions, tensions)

Rappels de style: pr√©cision, ton trading floor, pas de blabla. Si une classe n'a pas boug√©, dis-le clairement. G√©n√®re le JSON structur√© (aucun texte hors-JSON).
"""

            # Effectuer la recherche via OpenAI avec fallback de tool
            tool_candidates = [{"type": "web_search"}, {"type": "web_search_preview"}]
            response = None
            last_err = None
            for t in tool_candidates:
                try:
                    if user_location:
                        t = {**t, "user_location": {"type": "approximate", **user_location}}
                    response = self.openai_client.responses.create(
                        model=os.getenv("AI_MODEL", "gpt-5"),
                        tools=[t],
                        input=[{"role":"user","content":[{"type":"input_text","text": prompt}]}],
                        reasoning={"effort": "high"}
                    )
                    break
                except Exception as e:
                    last_err = e
                    continue
            if response is None:
                raise last_err or RuntimeError("web_search tool unavailable")
            
            # Extraire le contenu
            for output_item in response.output:
                if output_item.type == "message":
                    return output_item.content[0].text
            
            return None
            
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration briefing complet: {e}")
            return None
    
    def search_specific_stock(self, symbol: str, user_location: Optional[Dict[str, str]] = None) -> Optional[WebSearchResult]:
        """
        Recherche des informations sp√©cifiques sur une action
        
        Args:
            symbol: Symbole de l'action (ex: AAPL, TSLA)
            user_location: Localisation de l'utilisateur
            
        Returns:
            WebSearchResult ou None
        """
        try:
            query = f"""Recherche les informations actuelles sur l'action {symbol}:
- Prix actuel et variations
- Volume d'√©change
- Ratios financiers (P/E, P/B, etc.)
- Actualit√©s r√©centes
- Analyses d'analystes
- Perspectives et recommandations
Fournis les donn√©es les plus r√©centes disponibles."""
            
            return self.search_financial_markets(
                search_type=WebSearchType.STOCK_ANALYSIS,
                user_location=user_location
            )
            
        except Exception as e:
            logger.error(f"Erreur recherche action {symbol}: {e}")
            return None
    
    def get_market_alert(self, alert_type: str = "breaking_news") -> Optional[WebSearchResult]:
        """
        Recherche des alertes de march√© en temps r√©el
        
        Args:
            alert_type: Type d'alerte (breaking_news, market_moves, etc.)
            
        Returns:
            WebSearchResult ou None
        """
        try:
            query = f"""Recherche les alertes de march√© en temps r√©el:
- Actualit√©s importantes qui viennent de sortir
- Mouvements de march√© significatifs
- Annonces de banques centrales
- √âv√©nements g√©opolitiques impactant les march√©s
- Ruptures de tendance
Fournis les informations les plus r√©centes et importantes."""
            
            return self.search_financial_markets(
                search_type=WebSearchType.FINANCIAL_NEWS
            )
            
        except Exception as e:
            logger.error(f"Erreur recherche alertes: {e}")
            return None

def create_web_search_manager(openai_client) -> OpenAIWebSearchManager:
    """Factory function pour cr√©er un gestionnaire de recherche web"""
    return OpenAIWebSearchManager(openai_client) 